'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

/* eslint-disable */
var Gauge = function () {
    function Gauge(options) {
        (0, _classCallCheck3.default)(this, Gauge);
        this.defaults = {
            value: 0,
            value_max: 0,
            ticks: 5,
            degrees: 180,
            thickness: 3,
            percent: 0,
            percent_target: 0,
            duration: 550,
            color: '#fff',
            color_active: '#fff77a',
            scale: .95
        };

        options = (0, _assign2.default)(this.defaults, options);
        var _options = options,
            element = _options.element;

        element.width = this.responsive(element.width);
        element.height = this.responsive(element.height);
        options.percent = options.value / options.value_max;
        options.percent_target = options.percent;
        options.context = element.getContext('2d');
        options.thickness = this.responsive(options.thickness);
        options.stroages = [];

        var size = 4;
        var spacing = options.value_max / 4;
        for (var i = 0; i < 5; i++) {
            options.stroages.push(spacing * i);
        }
        for (var _i in options) {
            !!!this[_i] && (this[_i] = options[_i]);
        }
    }

    (0, _createClass3.default)(Gauge, [{
        key: 'prepare',
        value: function prepare() {
            var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            var _element = this.element,
                width = _element.width,
                height = _element.height,
                context = this.context,
                thickness = this.thickness,
                scale = this.scale;

            visible && context.clearRect(0, 0, width, height);
            context.translate(width / 2, height - thickness / 2 - this.responsive(3));
            context.scale(scale, scale);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this = this;

            var _element2 = this.element,
                width = _element2.width,
                height = _element2.height,
                stroages = this.stroages,
                value = this.value,
                context = this.context,
                percent = this.percent,
                percent_target = this.percent_target,
                degrees = this.degrees,
                thickness = this.thickness,
                color = this.color,
                color_active = this.color_active;

            {
                context.save();
                this.prepare();
                context.fillStyle = '#fff';
                context.font = this.responsive(14) + 'px Microsoft Yahei';
                context.textAlign = 'center';
                context.textBaseLine = 'bottom';
                context.fillText('认证分', 0, this.responsive(-42));
                context.restore();
            }
            {
                context.save();
                this.prepare(false);
                context.fillStyle = '#fff';
                context.font = this.responsive(36) + 'px Microsoft Yahei';
                context.textAlign = 'center';
                context.textBaseLine = 'bottom';
                context.fillText(value, 0, 0);
                context.restore();
            }
            {
                stroages.map(function (stroage, index) {
                    var x = 0;
                    var y = 0;
                    index == 0 && (x = -110, y = 2.5);
                    index == 1 && (x = -82, y = -60);
                    index == 2 && (x = 0, y = -100);
                    index == 3 && (x = 82, y = -60);
                    index == 4 && (x = 103, y = 2.5);
                    context.save();
                    _this.prepare(false);
                    context.fillStyle = stroage <= value ? color_active : color;
                    context.font = _this.responsive(16) + 'px Arial';
                    context.textAlign = 'center';
                    context.textBaseLine = 'bottom';
                    context.fillText(stroage, _this.responsive(x), _this.responsive(y));
                    context.restore();
                });
            }
            // 文字刻度
            // {
            //     context.save();
            //     this.prepare(false);
            //     // figure out how many degrees between each tick
            //     let ticks = 5;
            //     let rotation = degrees / (ticks - 1);
            //     let starting = (180 - degrees) / 2;
            //     let stroage = [0, 30, 60, 90, 120];
            //     context.rotate(starting * Math.PI / 180);
            //     context.scale(.82, .82);
            //     for(let i = 0;i < ticks;i++){
            //         let visible = (stroage[i] <= percent);
            //         context.fillStyle = visible ? color_active : color;
            //         context.font = `${this.responsive(18)}px Arial`;
            //         context.fillText(stroage[i], -1 * (width / 2), -thickness / 2);
            //         context.rotate(rotation * Math.PI / 180);
            //     }
            //     context.restore();
            // }
            // 刻度
            {
                context.save();
                this.prepare(false);
                // figure out how many degrees between each tick
                var ticks = 5 + this.ticks * 4;
                var rotation = degrees / (ticks - 1);
                var starting = (180 - degrees) / 2;
                // context.rotate(starting * Math.PI / 180);
                for (var i = 0; i <= ticks; i++) {
                    var visible = i / ticks * 100 <= percent;
                    // let size = (i + this.ticks) % ((ticks - 1) / 4) === 0 ? 52 : 52;
                    context.fillStyle = visible ? color_active : color;
                    context.fillRect(-1 * (width / 2), -thickness / 2, this.responsive(23), thickness);
                    context.rotate(rotation * Math.PI / 180);
                }
                context.restore();
            }
            // 轨道
            {
                context.save();
                this.prepare(false);
                // figure out how many degrees between each tick
                var _ticks = 5 + 180 * 4;
                var _rotation = degrees / (_ticks - 10);
                var _starting = (178 - degrees) / 2;
                thickness = this.responsive(1);
                context.rotate(_starting * Math.PI / 180);
                context.scale(.55, .55);
                for (var _i2 = 0; _i2 <= _ticks; _i2++) {
                    var _visible = _i2 / _ticks * 100 <= percent;
                    // let size = (i + this.ticks) % ((ticks - 1) / 4) === 0 ? 10 : 10;
                    context.fillStyle = _visible ? color_active : color;
                    context.fillRect(-1 * (width / 2), -thickness / 2, this.responsive(3), thickness);
                    context.rotate(_rotation * Math.PI / 180);
                }
                context.restore();
            }
            {
                context.save();
                this.prepare(false);
                // figure out how many degrees between each tick
                var _ticks2 = 5 + 180 * 4;
                var _rotation2 = degrees / (_ticks2 - 1);
                var _starting2 = (180 - degrees) / 2;
                var index = 0;
                thickness = this.responsive(7);
                context.rotate(_starting2 * Math.PI / 180);
                context.scale(.545, .545);
                for (var _i3 = 0; _i3 <= _ticks2; _i3++) {
                    var _visible2 = _i3 / _ticks2 * 100 <= percent - 1;
                    _visible2 && (index = _i3);
                }
                for (var _i4 = 0; _i4 <= _ticks2; _i4++) {
                    var _visible3 = _i4 / _ticks2 * 100 <= percent;
                    var size = (_i4 + this.ticks) % ((_ticks2 - 1) / 4) === 0 ? 10 : 10;
                    context.beginPath();
                    context.fillStyle = _i4 == index ? color_active : 'transparent';
                    context.arc(-1 * (width / 2), -thickness / 2, thickness, degrees, Math.PI * 2, true);
                    context.closePath();
                    context.fill();
                    context.rotate(_rotation2 * Math.PI / 180);
                }
                context.restore();
            }
            return true;
        }
    }, {
        key: 'update',
        value: function update() {
            var _this2 = this;

            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var self = this;
            var value_max = this.value_max,
                percent = this.percent,
                percent_target = this.percent_target,
                duration = this.duration;

            percent = value / value_max;
            percent_target = Math.round(value / value_max * 100);
            // this.value = value;
            if (duration) {
                var updated = Date.now();
                var start = percent;
                var end = percent_target;
                var timer = (end - start) / duration;
                var increasing = timer > 0 ? 1 : 0;
                var update = function update() {
                    var now = Date.now();
                    var elapsed = now - updated;
                    _this2.percent += elapsed * timer;
                    updated = now;
                    if (increasing && _this2.percent < percent_target || !increasing && _this2.percent > percent_target) {
                        _this2.value++;
                        _this2.render();
                        _this2.requestAnimationFrame(update);
                    } else {
                        _this2.value = value;
                        percent = percent_target;
                        _this2.render();
                    }
                };
                this.requestAnimationFrame(update);
            } else {
                this.percent = value;
                this.render();
            }
        }
    }, {
        key: 'responsive',
        value: function responsive(value, visible) {
            return value * devicePixelRatio;
        }
    }, {
        key: 'requestAnimationFrame',
        value: function requestAnimationFrame(callback) {
            return (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
                window.setTimeout(function () {
                    callback(+new Date());
                }, 1000 / 60);
            })(callback);
        }
    }]);
    return Gauge;
}();

exports.default = Gauge;
;
module.exports = exports['default'];