{"version":3,"sources":["src\\js\\pages\\mobile\\certification\\credit\\email.js"],"names":["title","COMPLETED_TEXT","Import","props","state","visible","lock","loaded","loading","buttonText","READY_TEXT","document","middleware","getButtonText","route","then","response","data","name","whetherBindingCredit","fail","setTimeout","replace","setState","catch","bind","code","message","push","form","getFieldInstance","getFieldsValue","validateFields","errors","values","i","input","map","offline","error","element","field","refs","focus","email","password","post","login_name","success","captcha","pic_captcha","getFieldValue","setFieldsValue","verify_code","undefined","hide","refreshCaptcha","getFieldProps","rules","required","type","submit","text","onPress","backgroundImage"],"mappings":"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","file":"email.js","sourceRoot":"E:/MyStudy/Redux/app_four","sourcesContent":["/* eslint-disable */\r\nimport React, {Component, createClass} from 'react';\r\nimport {Modal, List, InputItem, Checkbox, Button, Picker, Toast, Icon} from 'antd-mobile';\r\nimport {createForm} from 'rc-form';\r\nimport classnames from 'classnames';\r\nimport 'scss/mobile/credit.component.scss';\r\nimport request from 'common/request';\r\nimport {resolveUrl as url, redirect, hrefNative as native, platform} from 'utils';\r\n\r\nlet title = '信用卡账单导入';\r\n\r\nconst COMPLETED_TEXT = '导入账单';\r\n\r\nclass Import extends Component{\r\n    state = {\r\n        visible: 0,\r\n        lock: 1,\r\n        loaded: 0,\r\n        loading: 0,\r\n        buttonText: this.props.READY_TEXT\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    componentDidMount(){\r\n        document.title = title;\r\n        let {middleware, getButtonText, route} = this.props;\r\n        request('credit-card/get-credit-user-name').then(response => {\r\n            let {name, whetherBindingCredit} = response.data;\r\n            if(!whetherBindingCredit){\r\n                Toast.fail('您还末绑定信用卡', () => {\r\n                    setTimeout(redirect.replace('/mobile/certification/credit'));\r\n                });\r\n            }\r\n            this.setState({\r\n                name,\r\n                buttonText: COMPLETED_TEXT,\r\n                loaded: 1\r\n            });\r\n        }).catch(this.middleware.bind(this));\r\n    }\r\n    middleware(response){\r\n        let {code, message} = response;\r\n        let {middleware} = this.props;\r\n        if(code == -5){\r\n            this.setState({visible: 0, buttonText: COMPLETED_TEXT});\r\n            Toast.fail(message, () => {\r\n                setTimeout(redirect.push('/mobile/certification/credit'));\r\n            });\r\n        }else{\r\n            middleware.bind(this, response)();\r\n        }\r\n    }\r\n    submit(){\r\n        let {middleware} = this.props;\r\n        let {getFieldInstance, getFieldsValue, validateFields} = this.props.form;\r\n        validateFields(['email', 'password'], (errors, values) => {\r\n            if(errors){\r\n                for(let i in errors){\r\n                    let input = errors[i];\r\n                    input.errors && input.errors.map(error => {\r\n                        Toast.offline(error.message, () => {\r\n                            let element = getFieldInstance(error.field);\r\n                            if(element && element.refs && element.refs.input){\r\n                                let {input} = element.refs;\r\n                                setTimeout(input.focus());\r\n                            }\r\n                        });\r\n                    });\r\n                    break;\r\n                }\r\n            }else{\r\n                let {lock} = this.state;\r\n                let {email, password} = getFieldsValue();\r\n                if(lock){\r\n                    this.setState({lock: 0, loaded: 0, loading: 1});\r\n                    request.post('credit-card/mail-authentication', {\r\n                        login_name: email,\r\n                        password\r\n                    }).then(response => {\r\n                        let {message} = response;\r\n                        Toast.success(message, () => {\r\n                            setTimeout(redirect.replace('/mobile/certification/credit/importing?type=email'));\r\n                        });\r\n                        this.setState({lock: 1, loaded: 1, loading: 0});\r\n                    }).catch(response => {\r\n                        let {code, message, data: {pic_captcha: captcha}} = response;\r\n                        this.setState({lock: 1, loaded: 1, loading: 0});\r\n                        if(code == 1){\r\n                            this.setState({\r\n                                captcha\r\n                            });\r\n                            setTimeout(() => {\r\n                                this.setState({\r\n                                    visible: 1\r\n                                });\r\n                            });\r\n                        }else if(code == 2){\r\n                            Toast.success(message, () => {\r\n                                setTimeout(redirect.replace('/mobile/certification/credit/import?fail'));\r\n                            });\r\n                        }else{\r\n                            this.middleware.bind(this, response)();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n    // 提交验证码   \r\n    captcha(){\r\n        let {lock} = this.state;\r\n        if(lock){\r\n            let {getFieldValue, setFieldsValue} = this.props.form;\r\n            let verify_code = getFieldValue('verify_code');\r\n            if(!verify_code){\r\n                Toast.fail('验证码不能为空');\r\n                return;\r\n            }\r\n            Toast.loading(undefined, 0);\r\n            this.setState({visible: 0, lock: 0});\r\n            request.post('credit-card/mail-authentication-captcha', {verify_code}).then(response => {\r\n                Toast.hide();\r\n                this.setState({visible: 0, lock: 1});\r\n                redirect.push('/mobile/certification/credit/importing?type=email');\r\n            }).catch(response => {\r\n                let {code, message, data: {pic_captcha: captcha}} = response;\r\n                setFieldsValue({verify_code: ''});\r\n                this.setState({lock: 1, loaded: 1, loading: 0});\r\n                if(code == -1 && message == '验证码错误'){\r\n                    setTimeout(() => {\r\n                        this.refreshCaptcha.bind(this)();\r\n                        this.setState({visible: 1});\r\n                    }, 1500);\r\n                }\r\n                if(code == 1){\r\n                    Toast.offline(message, () => {\r\n                        this.setState({\r\n                            captcha,\r\n                            visible: 1\r\n                        });\r\n                    });\r\n                }else if(code == 2){\r\n                    Toast.success(message, () => {\r\n                        setTimeout(redirect.replace('/mobile/certification/credit/import?fail'));\r\n                    });\r\n                }else{\r\n                    this.middleware.bind(this, response)();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    // 刷新验证码\r\n    refreshCaptcha(){\r\n        let {lock} = this.state;\r\n        if(lock){\r\n            Toast.loading(undefined, 0);\r\n            this.setState({lock: 0});\r\n            request.post('credit-card/refresh-mail-authentication-captcha').then(response => {\r\n                let {pic_captcha: captcha} = response.data;\r\n                Toast.hide();\r\n                this.setState({captcha, lock: 1});\r\n            }).catch(this.middleware.bind(this));\r\n        }\r\n    }\r\n    render(){\r\n        let {getFieldProps} = this.props.form;\r\n        let {visible, captcha, lock, loaded, loading, name, buttonText} = this.state;\r\n        return (\r\n            <div className='import'>\r\n                <div className='email'>\r\n                    <List>\r\n                        <InputItem editable={false} labelNumber={4} value={name}>持卡人</InputItem>\r\n                        <InputItem\r\n                        labelNumber={4}\r\n                        placeholder='邮箱地址'\r\n                        {...getFieldProps('email', {\r\n                            rules: [{\r\n                                required: true,\r\n                                message: '邮箱地址不能为空'\r\n                            }, {\r\n                                type: 'email',\r\n                                message: '邮箱格式不正确'\r\n                            }]\r\n                        })}>邮箱地址</InputItem>\r\n                        <InputItem\r\n                        type='password'\r\n                        labelNumber={4}\r\n                        placeholder='邮箱密码'\r\n                        {...getFieldProps('password', {\r\n                            rules: [{\r\n                                required: true,\r\n                                message: '邮箱密码不能为空'\r\n                            }]\r\n                        })}>邮箱密码</InputItem>\r\n                    </List>\r\n                    <Button\r\n                    type='primary'\r\n                    // disabled={!lock || disabled || loading}\r\n                    loading={loading}\r\n                    className={classnames({\r\n                        'button-submit': true,\r\n                        'button-round': true,\r\n                        'button-loading': !loaded,\r\n                        // 'button-disabled': disabled\r\n                    })}\r\n                    onClick={this.submit.bind(this)}>{buttonText}</Button>\r\n                    <div className='security'>银行级数据加密防护</div>\r\n                </div>\r\n                <Modal\r\n                className='am-modal-captcha'\r\n                title='提示'\r\n                onClose={() => setTimeout(this.setState({visible: 0}))}\r\n                visible={visible}\r\n                transparent\r\n                footer={[{\r\n                    text: '确定',\r\n                    onPress: this.captcha.bind(this)\r\n                }]}>\r\n                    <InputItem\r\n                    labelNumber={3}\r\n                    placeholder='请输入验证码'\r\n                    extra={captcha ? <div className='captcha' style={{backgroundImage: `url(data:image/jpeg;base64,${captcha})`}} onClick={this.refreshCaptcha.bind(this)}/> : ''}\r\n                    {...getFieldProps('verify_code', {\r\n                        rules: [{\r\n                            required: true,\r\n                            message: `验证码不能为空`\r\n                        }]\r\n                    })}>验证码</InputItem>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default createForm()(Import);"]}