{"version":3,"sources":["src\\js\\pages\\mobile\\certification\\jobs.js"],"names":["title","Jobs","props","state","lock","loaded","loading","buttonText","READY_TEXT","COMPLETED_TEXT","formatPickerData","getButtonText","route","middleware","then","response","data","item","name","company_name","address","company_address","street","company_address_distinct","worktype","company_worktype","worktypes","company_worktype_list","map","temp","area","split","label","push","value","childrens","children","setState","catch","document","nextStepLink","form","getFieldInstance","getFieldsValue","validateFields","errors","values","i","input","offline","error","message","element","field","refs","setTimeout","focus","start","Date","now","length","join","post","end","timeout","success","bind","getFieldProps","getFieldValue","disabled","editable","worktypeValue","initialValue","rules","required","submit","contextTypes","router","PropTypes","object","isRequired"],"mappings":"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","file":"jobs.js","sourceRoot":"E:/MyStudy/Redux/app_four","sourcesContent":["/* eslint-disable */\r\nimport React, {Component, createClass} from 'react';\r\nimport {List, InputItem, Button, Picker, Toast, Checkbox} from 'antd-mobile';\r\nimport {createForm} from 'rc-form';\r\nimport classnames from 'classnames';\r\nimport 'scss/mobile/jobs.component.scss';\r\nimport request from 'common/request';\r\nimport {resolveUrl as url, redirect, hrefNative as native, platform} from 'utils';\r\n\r\nimport areas from './data';\r\n\r\nconst title = '工作信息';\r\n\r\nclass Jobs extends Component{\r\n    static contextTypes = {\r\n        router: React.PropTypes.object.isRequired\r\n    }\r\n    state = {\r\n        lock: true,\r\n        // 数据加载完毕\r\n        loaded: false,\r\n        // request loading\r\n        loading: false,\r\n        // 按钮文案\r\n        buttonText: this.props.READY_TEXT\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n        let {COMPLETED_TEXT, loaded, formatPickerData, getButtonText, route, middleware} = this.props;\r\n        let {buttonText} = this.state;\r\n        request('credit-card/get-work-info').then(response => {\r\n            let {item: {\r\n                company_name: name,\r\n                company_address: address,\r\n                company_address_distinct: street,\r\n                company_worktype: worktype,\r\n                company_worktype_list: worktypes}\r\n            } = response.data;\r\n            loaded();\r\n            worktypes && worktypes.map(formatPickerData);\r\n            buttonText = COMPLETED_TEXT;\r\n            if(address){\r\n                let temp = [];\r\n                let area = address.split(' ');\r\n                areas.map(data => {\r\n                    if(data.label == area[0]){\r\n                        temp.push(data.value);\r\n                        let childrens = data.children;\r\n                        childrens && childrens.map(children => {\r\n                            if(children.label == area[1]){\r\n                                temp.push(children.value);\r\n                                let childrens = children.children;\r\n                                childrens && childrens.map(children => {\r\n                                    if(children.label == area[2]){\r\n                                        temp.push(children.value);\r\n                                    }\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                });\r\n                address = temp;\r\n            }\r\n            this.setState({\r\n                name,\r\n                address,\r\n                street,\r\n                worktype: worktype ? [+worktype]: null,\r\n                worktypes,\r\n                buttonText,\r\n                loaded: 1\r\n            })\r\n        }).catch(middleware);\r\n    }\r\n    componentDidMount(){\r\n        document.title = title;\r\n    }\r\n    submit(){\r\n        let {COMPLETED_TEXT, nextStepLink, route, middleware, getButtonText} = this.props;\r\n        let {getFieldInstance, getFieldsValue, validateFields} = this.props.form;\r\n        validateFields((errors, values) => {\r\n            if(errors){\r\n                for(let i in errors){\r\n                    let input = errors[i];\r\n                    input.errors && input.errors.map(error => {\r\n                        Toast.offline(error.message, 1.5, () => {\r\n                            let element = getFieldInstance(error.field);\r\n                            if(element && element.refs && element.refs.input){\r\n                                let {input} = element.refs;\r\n                                setTimeout(input.focus());\r\n                            }\r\n                        });\r\n                    });\r\n                    break;\r\n                }\r\n            }else{\r\n                let {lock, buttonText} = this.state;\r\n                let {name, worktype, address, street} = getFieldsValue();\r\n                if(lock){\r\n                    this.setState({lock: 0, loaded: 0, loading: 1});\r\n\r\n                    let start = Date.now();\r\n                    if(address && address.length){\r\n                        let temp = [];\r\n                        areas.map(data => {\r\n                            if(data.value == address[0]){\r\n                                temp.push(data.label);\r\n                                let childrens = data.children;\r\n                                childrens && childrens.map(children => {\r\n                                    if(children.value == address[1]){\r\n                                        temp.push(children.label);\r\n                                        let childrens = children.children;\r\n                                        childrens && childrens.map(children => {\r\n                                            if(children.value == address[2]){\r\n                                                temp.push(children.label);\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                })\r\n                            }\r\n                        });\r\n                        address = temp.join(' ');\r\n                    }\r\n                    request.post('credit-card/save-work-info', {\r\n                        company_name: name,\r\n                        company_worktype: worktype[0],\r\n                        company_address: address,\r\n                        company_address_distinct: street,\r\n                    }).then(response => {\r\n                        let end = Date.now();\r\n                        let timeout = 0;\r\n                        if(end - start < 1000) timeout = 1000;\r\n                        if(end - start > 1000) timeout = 0;\r\n                        let {message} = response;\r\n                        setTimeout(() => {\r\n                            Toast.success(message, 1.5, () => {\r\n                                buttonText = COMPLETED_TEXT;\r\n                                setTimeout(nextStepLink(route));\r\n                            });\r\n                            this.setState({lock: 1, loaded: 1, loading: 0, buttonText});\r\n                        }, timeout);\r\n                    }).catch(middleware.bind(this));\r\n                }\r\n            }\r\n        });\r\n    }\r\n    render(){\r\n        let {form: {getFieldProps, getFieldValue}, label} = this.props;\r\n        let {lock,\r\n            loaded,\r\n            loading,\r\n            disabled,\r\n            name,\r\n            worktype,\r\n            worktypes,\r\n            address,\r\n            street,\r\n            buttonText\r\n        } = this.state;\r\n        let editable = !loading && loaded && lock;\r\n        let worktypeValue = getFieldValue('worktype') || worktype;\r\n        return (\r\n            <div className='jobs'>\r\n                <List renderHeader={() => '为保证借款申请顺利通过，请务必填写真实信息'}>\r\n                    <Picker\r\n                    cols={1}\r\n                    disabled={!editable}\r\n                    data={worktypes}\r\n                    {...getFieldProps('worktype', {\r\n                        initialValue: worktype,\r\n                        rules: [{\r\n                            required: true,\r\n                            message: '请选择工作类型'\r\n                        }]\r\n                    })}>\r\n                        <List.Item arrow='horizontal'>{label('工作类型')}</List.Item>\r\n                    </Picker>\r\n                    {(worktypeValue && worktypeValue[0] === 1) ? \r\n                        <div>\r\n                        <InputItem\r\n                        editable={editable}\r\n                        placeholder='请输入单位名称'\r\n                        {...getFieldProps('name', {\r\n                            initialValue: name,\r\n                            rules: [{\r\n                                required: true,\r\n                                message: '单位名称不能为空'\r\n                            }]\r\n                        })}>{label('单位名称')}</InputItem>\r\n                        <Picker\r\n                        disabled={!editable}\r\n                        data={areas}\r\n                        format={values => values.join(' ')}\r\n                        {...getFieldProps('address', {\r\n                            initialValue: address,\r\n                            rules: [{\r\n                                required: true,\r\n                                message: '请选择单位所在地'\r\n                            }]\r\n                        })}>\r\n                            <List.Item arrow='horizontal'>{label('单位地址')}</List.Item>\r\n                        </Picker>\r\n                        <InputItem\r\n                        editable={editable}\r\n                        className='street'\r\n                        placeholder='填写具体街道门牌号'\r\n                        {...getFieldProps('street', {\r\n                            initialValue: street,\r\n                            rules: [{\r\n                                required: true,\r\n                                message: '街道门牌号不能为空'\r\n                            }]\r\n                        })}/>\r\n                    </div> : ''}\r\n                </List>\r\n                <Button\r\n                type='primary'\r\n                // disabled={!lock || disabled || loading}\r\n                loading={loading}\r\n                className={classnames({\r\n                    'button-submit': true,\r\n                    'button-round': true,\r\n                    'button-loading': !loaded,\r\n                    // 'button-disabled': disabled\r\n                })}\r\n                onClick={this.submit.bind(this)}>{buttonText}</Button>\r\n                <div className='security'>银行级数据加密防护</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default createForm()(Jobs);"]}