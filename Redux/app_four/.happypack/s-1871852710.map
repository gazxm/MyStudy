{"version":3,"sources":["src\\js\\pages\\mobile\\certification\\credit\\bank.js"],"names":["title","AgreeItem","COMPLETED_TEXT","Bank","props","state","visible","status","agree","lock","loaded","loading","buttonText","READY_TEXT","document","post","then","items","response","data","login","inputs","length","fail","setTimeout","goBack","setState","catch","middleware","bind","code","message","push","form","getFieldInstance","getFieldsValue","validateFields","undefined","field","map","input","name","errors","values","i","offline","error","element","refs","focus","entry_id","query","getFieldValue","verify_code","hide","captcha","pic_captcha","setFieldsValue","success","replace","indexOf","getFieldProps","index","label","desc","valid","rule","pattern","RegExp","type","rules","required","agreement","initialValue","submit","text","onPress","backgroundImage","refreshCaptcha"],"mappings":"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","file":"bank.js","sourceRoot":"E:/MyStudy/Redux/app_four","sourcesContent":["/* eslint-disable */\r\nimport React, {Component, createClass} from 'react';\r\nimport {Modal, List, InputItem, Checkbox, Button, Picker, Toast, Icon} from 'antd-mobile';\r\nimport {createForm} from 'rc-form';\r\nimport classnames from 'classnames';\r\nimport 'scss/mobile/credit.component.scss';\r\nimport request from 'common/request';\r\nimport {resolveUrl as url, redirect, hrefNative as native, platform} from 'utils';\r\n\r\nlet title = '信用卡账单导入';\r\n\r\nconst AgreeItem = Checkbox.AgreeItem;\r\nconst COMPLETED_TEXT = '导入账单';\r\n\r\nclass Bank extends Component{\r\n    state = {\r\n        visible: 0,\r\n        status: 0,\r\n        agree: 1,\r\n        lock: 1,\r\n        loaded: 0,\r\n        loading: 0,\r\n        buttonText: this.props.READY_TEXT\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    componentDidMount(){\r\n        document.title = title;\r\n        let {buttonText} = this.state;\r\n        request.post('credit-card/bill-verification-bank-list').then(response => {\r\n            let {login: items} = response.data;\r\n            buttonText = COMPLETED_TEXT;\r\n            if(!(items && items.inputs && items.inputs.length)){\r\n                Toast.fail('服务器繁忙，请稍后重试', () => {\r\n                    setTimeout(redirect.goBack);\r\n                });\r\n                return;\r\n            }\r\n            this.setState({\r\n                buttonText,\r\n                items,\r\n                loaded: 1\r\n            });\r\n        }).catch(this.middleware.bind(this));\r\n    }\r\n    middleware(response){\r\n        let {code, message} = response;\r\n        let {middleware} = this.props;\r\n        if(code == -5){\r\n            this.setState({buttonText: COMPLETED_TEXT});\r\n            Toast.fail(message, () => {\r\n                setTimeout(redirect.push('/mobile/certification/credit'));\r\n            });\r\n        }else{\r\n            middleware.bind(this, response)();\r\n        }\r\n    }\r\n    submit(){\r\n        let {middleware} = this.props;\r\n        let {getFieldInstance, getFieldsValue, validateFields} = this.props.form;\r\n        let {items: {inputs = undefined} = {}} = this.state;\r\n        let field = [];\r\n        inputs && inputs.map(input => {\r\n            field.push(input.name);\r\n        });\r\n        validateFields([...field, 'agree'], (errors, values) => {\r\n            if(errors){\r\n                for(let i in errors){\r\n                    let input = errors[i];\r\n                    input.errors && input.errors.map(error => {\r\n                        Toast.offline(error.message, () => {\r\n                            let element = getFieldInstance(error.field);\r\n                            if(element && element.refs && element.refs.input){\r\n                                let {input} = element.refs;\r\n                                setTimeout(input.focus());\r\n                            }\r\n                        });\r\n                    });\r\n                    break;\r\n                }\r\n            }else{\r\n                let {lock, items = {}} = this.state;\r\n                let data = getFieldsValue();\r\n                    data.entry_id = items.entry_id;\r\n                if(lock){\r\n                    this.setState({lock: 0, loading: 1});\r\n                    request.post('credit-card/online-banking-login', data).then(response => {\r\n                        let {message} = response;\r\n                        this.query.bind(this)();\r\n                    }).catch(this.middleware.bind(this));\r\n                }\r\n            }\r\n        });\r\n    }\r\n    // 提交验证码   \r\n    captcha(){\r\n        let {lock} = this.state;\r\n        if(lock){\r\n            let {getFieldValue} = this.props.form\r\n            let verify_code = getFieldValue('verify_code');\r\n            if(!verify_code){\r\n                Toast.fail('验证码不能为空');\r\n                return;\r\n            }\r\n            Toast.loading(undefined, 0);\r\n            this.setState({lock: 0});\r\n            request.post('credit-card/online-banking-login-captcha', {verify_code}).then(response => {\r\n                Toast.hide();\r\n                this.setState({visible: 0, lock: 1});\r\n                redirect.push('/mobile/certification/credit/importing?type=bank');\r\n            }).catch(response => {\r\n                let {code, message} = response;\r\n                if(code == 1){\r\n                    this.query.bind(this)();\r\n                }else{\r\n                    this.middleware.bind(this, response)();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    // 刷新验证码\r\n    refreshCaptcha(){\r\n        let {lock} = this.state;\r\n        if(lock){\r\n            Toast.loading(undefined, 0);\r\n            this.setState({lock: 0});\r\n            request.post('credit-card/online-banking-login-resend-captcha').then(response => {\r\n                let {pic_captcha: captcha} = response.data;\r\n                Toast.hide();\r\n                this.setState({captcha, lock: 1});\r\n            }).catch(this.middleware.bind(this));\r\n        }\r\n    }\r\n    // 授权协议\r\n    agreement(){\r\n        let {agree} = this.state;\r\n        let {setFieldsValue, getFieldValue} = this.props.form;\r\n        setTimeout(() => {\r\n            agree = !agree;\r\n            setFieldsValue({\r\n                agree: agree ? 1 : undefined\r\n            });\r\n            this.setState({agree});\r\n        });\r\n    }\r\n    // 提交查询\r\n    query(){\r\n        request.post('/credit-card/get-online-banking-login-state').then(response => {\r\n            let {code, message} = response;\r\n            this.setState({lock: 1, loaded: 1, loading: 0});\r\n            Toast.success(message, () => {\r\n                setTimeout(redirect.replace('/mobile/certification/credit/importing?type=bank'));\r\n            });\r\n        }).catch(response => {\r\n            let {code, message, data: {pic_captcha: captcha}} = response;\r\n            if(code == 1){\r\n                this.query.bind(this)();\r\n            }else if([2, 3, 4].indexOf(code) >= 0){\r\n                this.setState({\r\n                    lock: 1,\r\n                    loaded: 1,\r\n                    loading: 0,\r\n                    status: code,\r\n                    captcha\r\n                });\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        visible: 1\r\n                    });\r\n                });\r\n            }else if(code == 5){\r\n                Toast.success(message, () => {\r\n                    setTimeout(redirect.replace('/mobile/certification/credit/import?fail'));\r\n                });\r\n            }else{\r\n                this.middleware.bind(this, response)();\r\n            }\r\n        });\r\n    }\r\n    render(){\r\n        let {getFieldProps} = this.props.form;\r\n        let {visible, captcha, status, items = {}, lock, loaded, loading, agree, buttonText} = this.state;\r\n        let {inputs} = items;\r\n        let input = (data, index) => {\r\n            let {name, label, desc, valid} = data;\r\n            let props = {};\r\n            let rule = {};\r\n            if(valid){\r\n                rule.pattern = new RegExp(valid);\r\n                rule.message = `${label}不正确`\r\n            }\r\n            name == 'password' && (props.type = 'password');\r\n            return (\r\n                <InputItem\r\n                key={index}\r\n                labelNumber={5}\r\n                placeholder={desc}\r\n                {...props}\r\n                {...getFieldProps(name, {\r\n                    rules: [{\r\n                        required: true,\r\n                        message: `${label}不能为空`\r\n                    }, rule]\r\n                })}>{label}</InputItem>\r\n            );\r\n        };\r\n        return (\r\n            <div className='import'>\r\n                {(inputs && inputs.length) ?\r\n                    <div className='bank'>\r\n                        <div>\r\n                            <List>\r\n                                {(inputs && inputs.length) && inputs.map(input)}\r\n                                <AgreeItem\r\n                                onClick={this.agreement.bind(this)}\r\n                                checked={agree}\r\n                                {...getFieldProps('agree', {\r\n                                    initialValue: 1,\r\n                                    rules: [{\r\n                                        required: true,\r\n                                        message: `请同意用户授权协议`\r\n                                    }]\r\n                                })}>\r\n                                    我已阅读并同意<a onClick={() => {}}>《用户授权服务协议》</a>\r\n                                </AgreeItem>\r\n                            </List>\r\n                            <Button\r\n                            type='primary'\r\n                            // disabled={!lock || disabled || loading}\r\n                            loading={loading}\r\n                            className={classnames({\r\n                                'button-submit': true,\r\n                                'button-round': true,\r\n                                'button-loading': !lock,\r\n                                // 'button-disabled': disabled\r\n                            })}\r\n                            onClick={this.submit.bind(this)}>{buttonText}</Button>\r\n                            <div className='security'>银行级数据加密防护</div>\r\n                        </div>\r\n                    </div>\r\n                : ''}\r\n                <Modal\r\n                className='am-modal-captcha'\r\n                title='提示'\r\n                onClose={() => setTimeout(this.setState({visible: 0}))}\r\n                visible={visible}\r\n                transparent\r\n                footer={[{\r\n                    text: '确定',\r\n                    onPress: this.captcha.bind(this)\r\n                }]}>\r\n                    {status == 2 ?\r\n                        <InputItem\r\n                        labelNumber={4}\r\n                        placeholder='请输入动态口令'\r\n                        {...getFieldProps('verify_code', {\r\n                            rules: [{\r\n                                required: true,\r\n                                message: `动态口令不能为空`\r\n                            }]\r\n                        })}>动态口令</InputItem>\r\n                    : ''}\r\n                    {status == 3 ?\r\n                        <InputItem\r\n                        labelNumber={3}\r\n                        placeholder='请输入验证码'\r\n                        extra={captcha ? <div className='captcha' style={{backgroundImage: `url(data:image/jpeg;base64,${captcha})`}} onClick={this.refreshCaptcha.bind(this)}/> : ''}\r\n                        {...getFieldProps('verify_code', {\r\n                            rules: [{\r\n                                required: true,\r\n                                message: `验证码不能为空`\r\n                            }]\r\n                        })}>验证码</InputItem>\r\n                    : ''}\r\n                    {status == 4 ?\r\n                        <InputItem\r\n                        labelNumber={5}\r\n                        placeholder='请输入短信验证码'\r\n                        {...getFieldProps('verify_code', {\r\n                            rules: [{\r\n                                required: true,\r\n                                message: `短信验证码不能为空`\r\n                            }]\r\n                        })}>短信验证码</InputItem>\r\n                    : ''}\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n};\r\nexport default createForm()(Bank);"]}