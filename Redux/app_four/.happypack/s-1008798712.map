{"version":3,"sources":["src\\js\\pages\\mobile\\certification\\operator.js"],"names":["CheckboxItem","AgreeItem","title","timer","Operator","props","state","lock","loaded","loading","agree","buttonText","READY_TEXT","document","domain","e","formatPickerData","middleware","nextStepLink","getButtonText","hideSteps","route","router","context","operator","refs","window","operatorSuccess","isApp","setTimeout","step","body","querySelector","stepHeight","scrollHeight","style","marginTop","marginBottom","width","scrollWidth","height","COMPLETED_TEXT","form","getFieldInstance","getFieldsValue","validateFields","errors","values","i","input","map","offline","error","message","element","field","focus","service_password","setState","start","Date","now","post","p","then","end","timeout","response","success","disabled","getFieldProps","label","phone","status","verify","editable","contextTypes","PropTypes","object","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBAAA;;AACA;;;;AAEA;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAM,eAAe,mBAArB,AAA8B;AAC9B,IAAM,YAAY,mBAAlB,AAA2B;;AAE3B,IAAM,QAAN,AAAc;;AAEd,IAAI,aAAJ;;I,AAEM;sCAcF;;sBAAA,AAAY,OAAM;4CAAA;;8IAAA,AACR;;cAXV,AAUkB;kBAVV,AACE,AACN;AACA;oBAHI,AAGI,AACR;AACA;qBALI,AAKK,AACT;mBANI,AAMG,AACP;AACA;wBAAY,MAAA,AAAK,MARb,AAQmB,AAET;AAVV,AACJ;eAWH;;;;;4CACkB,AACf;qBAAA,AAAS,QAAT,AAAiB,AACjB;gBAAG,AACC;yBAAA,AAAS,SAAT,AAAkB,AACrB;AAFD,cAEC,OAAA,AAAM,GAAE,AAAE,CAJI;yBAK6E,KAL7E,AAKkF;gBALlF,AAKV,gBALU,AAKV;gBALU,AAKF,0BALE,AAKF;gBALE,AAKgB,oBALhB,AAKgB;gBALhB,AAK4B,sBAL5B,AAK4B;gBAL5B,AAK0C,uBAL1C,AAK0C;gBAL1C,AAKyD,mBALzD,AAKyD;gBALzD,AAKoE,eALpE,AAKoE;gBALpE,AAMV,aAAc,KANJ,AAMS,MANT,AAMV;gBANU,AAOV,SAAU,KAPA,AAOK,QAPL,AAOV;gBAPU,AAQV,WAAY,KARF,AAQO,KARP,AAQV,AACL;;mBAAA,AAAO,kBAAkB,YAAM,AAC3B;oBAAG,gBAAH,AAAY,OAAM,AACd;2CAAA,AAAO,AACV;AAFD,uBAEK,AACD;+BAAW,aAAX,AAAW,AAAa,AAC3B;AACJ;AAND,AAOA;AACI;oBAAI,OAAO,SAAA,AAAS,KAAT,AAAc,cAAzB,AAAW,AAA4B,AACvC;oBAAI,aAAJ,AAAiB,AACjB;oBAAA,AAAG,MAAK,AACJ;iCAAa,KAAA,AAAK,eAAe,KAAA,AAAK,MAAzB,AAA+B,YAAY,KAAA,AAAK,MAA7D,AAAmE,AACtE;AACD;yBAAA,AAAS,QAAQ,SAAA,AAAS,KAA1B,AAA+B,AAC/B;yBAAA,AAAS,SAAS,SAAA,AAAS,KAAT,AAAc,eAAhC,AAA+C,AAClD;AACD;AACH;;;;iCACO;yBAAA;;0BACwC,KADxC,AAC6C;gBAD7C,AACC,yBADD,AACC;gBADD,AACiB,uBADjB,AACiB;gBADjB,AAC+B,gBAD/B,AAC+B;8BACsB,KAAA,AAAK,MAF1D,AAEgE;gBAFhE,AAEC,+BAFD,AAEC;gBAFD,AAEmB,6BAFnB,AAEmB;gBAFnB,AAEmC,6BAFnC,AAEmC,AACvC;;2BAAe,UAAA,AAAC,QAAD,AAAS,QAAW,AAC/B;oBAAA,AAAG,QAAO,AACN;yBAAI,IAAJ,AAAQ,KAAR,AAAa,QAAO,AAChB;4BAAI,QAAQ,OAAZ,AAAY,AAAO,AACnB;8BAAA,AAAM,gBAAU,AAAM,OAAN,AAAa,IAAI,iBAAS,AACtC;4CAAA,AAAM,QAAQ,MAAd,AAAoB,SAApB,AAA6B,KAAK,YAAM,AACpC;oCAAI,UAAU,iBAAiB,MAA/B,AAAc,AAAuB,AACrC;oCAAG,WAAW,QAAX,AAAmB,QAAQ,QAAA,AAAQ,KAAtC,AAA2C,OAAM;wCAAA,AACxC,SAAS,QAD+B,AACvB,KADuB,AACxC,AACL;;+CAAW,OAAX,AAAW,AAAM,AACpB;AACJ;AAND,AAOH;AARD,AAAgB,AAShB,yBATgB;AAUnB;AACJ;AAdD,uBAcK;iCACwB,OADxB,AAC6B;wBAD7B,AACI,cADJ,AACI;wBADJ,AACU,oBADV,AACU;;0CADV,AAEwB;wBAFxB,AAEI,mCAFJ,AAEI,AACL;;wBAAA,AAAG,MAAK,AACJ;+BAAA,AAAK,SAAS,EAAC,MAAD,AAAO,GAAG,QAAV,AAAkB,GAAG,SAAnC,AAAc,AAA8B,AAC5C;4BAAI,QAAQ,KAAZ,AAAY,AAAK,AACjB;0CAAA,AAAQ,KAAR,AAAa;+BAAb,AAA8C,AACvC;AADuC,AAC1C,2BADJ,AAEG,KAAK,oBAAY,AAChB;gCAAI,MAAM,KAAV,AAAU,AAAK,AACf;gCAAI,UAAJ,AAAc,AACd;gCAAG,MAAA,AAAM,QAAT,AAAiB,MAAM,UAAA,AAAU,AACjC;gCAAG,MAAA,AAAM,QAAT,AAAiB,MAAM,UAJP,AAIO,AAAU;gCAJjB,AAKX,UALW,AAKA,SALA,AAKX,AACL;;uCAAW,YAAM,AACb;gDAAA,AAAM,QAAN,AAAc,SAAd,AAAuB,KAAK,YAAM,AAC9B;iDAAA,AAAa,AACb;+CAAW,aAAX,AAAW,AAAa,AAC3B;AAHD,AAIA;uCAAA,AAAK,SAAS,EAAC,MAAD,AAAO,GAAG,QAAV,AAAkB,GAAG,SAArB,AAA8B,GAAG,UAAjC,AAA2C,GAAG,YAA5D,AAAc,AACjB;AAND,+BAAA,AAMG,AACN;AAfD,AAgBH;AAEJ;AACJ;AAxCD,AAyCH;;;;iCACO;0BACiC,KADjC,AACsC;gBADtC,AACQ,wBADR,AACC,KADD,AACQ;gBADR,AACwB,gBADxB,AACwB;0BAWxB,KAZA,AAYK;gBAZL,AAGA,eAHA,AAGA;gBAHA,AAIA,iBAJA,AAIA;gBAJA,AAKA,kBALA,AAKA;gBALA,AAMA,mBANA,AAMA;gBANA,AAOA,gBAPA,AAOA;gBAPA,AAQA,iBARA,AAQA;gBARA,AASA,gBATA,AASA;gBATA,AAUA,qBAVA,AAUA;gBAVA,AAWA,iBAXA,AAWA,AAEJ;;gBAAI,WAAW,CAAA,AAAC,WAAD,AAAY,UAA3B,AAAqC,AACrC;mBACI,gBAAA,cAAA,SAAK,WAAL,AAAe,AACX,wDAAQ,KAAR,AAAY,YAAW,KAAK,uBAFpC,AACI,AACI,AAA4B,AAAI,AAI3C;;;;4BA5GM,A;YACK,gBAAA,AAAM,UAAN,AAAgB,O,AADN,AACa;AADb,AAClB;AA4GP;;kBAEc,0BAAA,AAAa,A","file":"operator.js","sourceRoot":"E:/MyStudy/Redux/app_four","sourcesContent":["/* eslint-disable */\r\nimport React, {Component, createClass} from 'react';\r\nimport {List, InputItem, Button, Picker, Toast, Checkbox} from 'antd-mobile';\r\nimport {createForm} from 'rc-form';\r\nimport classnames from 'classnames';\r\nimport 'scss/mobile/operators.component.scss';\r\nimport request from 'common/request';\r\nimport {resolveUrl as url, redirect, hrefNative as native, platform} from 'utils';\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\nconst AgreeItem = Checkbox.AgreeItem;\r\n\r\nconst title = '手机运营商';\r\n\r\nlet timer;\r\n\r\nclass Operator extends Component{\r\n    static contextTypes = {\r\n        router: React.PropTypes.object.isRequired\r\n    }\r\n    state = {\r\n        lock: true,\r\n        // 数据加载完毕\r\n        loaded: false,\r\n        // request loading\r\n        loading: false,\r\n        agree: 1,\r\n        // 按钮文案\r\n        buttonText: this.props.READY_TEXT\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    componentDidMount(){\r\n        document.title = title;\r\n        try{\r\n            document.domain = 'xianjincard.com';\r\n        }catch(e){};\r\n        let {loaded, formatPickerData, middleware, nextStepLink, getButtonText, hideSteps, route} = this.props;\r\n        let {buttonText} = this.state;\r\n        let {router} = this.context;\r\n        let {operator} = this.refs;\r\n        window.operatorSuccess = () => {\r\n            if(platform.isApp){\r\n                native(12);\r\n            }else{\r\n                setTimeout(nextStepLink(route));\r\n            }\r\n        }\r\n        {\r\n            let step = document.body.querySelector('.am-steps');\r\n            let stepHeight = 0;\r\n            if(step){\r\n                stepHeight = step.scrollHeight + step.style.marginTop + step.style.marginBottom;\r\n            }\r\n            operator.width = document.body.scrollWidth;\r\n            operator.height = document.body.scrollHeight - stepHeight;\r\n        }\r\n        loaded();\r\n    }\r\n    submit(){\r\n        let {COMPLETED_TEXT, nextStepLink, route} = this.props;\r\n        let {getFieldInstance, getFieldsValue, validateFields} = this.props.form;\r\n        validateFields((errors, values) => {\r\n            if(errors){\r\n                for(let i in errors){\r\n                    let input = errors[i];\r\n                    input.errors && input.errors.map(error => {\r\n                        Toast.offline(error.message, 1.5, () => {\r\n                            let element = getFieldInstance(error.field);\r\n                            if(element && element.refs && element.refs.input){\r\n                                let {input} = element.refs;\r\n                                setTimeout(input.focus());\r\n                            }\r\n                        });\r\n                    });\r\n                    break;\r\n                }\r\n            }else{\r\n                let {lock, buttonText} = this.state;\r\n                let {service_password} = getFieldsValue();\r\n                if(lock){\r\n                    this.setState({lock: 0, loaded: 0, loading: 1});\r\n                    let start = Date.now();\r\n                    request.post('credit-info/post-service-code', {\r\n                        p: service_password\r\n                    }).then(response => {\r\n                        let end = Date.now();\r\n                        let timeout = 0;\r\n                        if(end - start < 1000) timeout = 1000;\r\n                        if(end - start > 1000) timeout = 0;\r\n                        let {message} = response;\r\n                        setTimeout(() => {\r\n                            Toast.success(message, 1.5, () => {\r\n                                buttonText = COMPLETED_TEXT;\r\n                                setTimeout(nextStepLink(route));\r\n                            });\r\n                            this.setState({lock: 1, loaded: 1, loading: 0, disabled: 1, buttonText});\r\n                        }, timeout);\r\n                    });\r\n                }\r\n                \r\n            }\r\n        });\r\n    }\r\n    render(){\r\n        let {form: {getFieldProps}, label} = this.props;\r\n        let {\r\n            lock,\r\n            loaded,\r\n            loading,\r\n            disabled,\r\n            phone,\r\n            status,\r\n            agree,\r\n            buttonText,\r\n            verify\r\n        } = this.state;\r\n        let editable = !loading && loaded && lock;\r\n        return (\r\n            <div className='operator'>\r\n                <iframe ref='operator' src={url('http://credit.xianjincard.com/credit-web/verification-jxl')}/>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default createForm()(Operator);"]}