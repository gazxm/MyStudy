'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _css = require('antd-mobile/lib/button/style/css');

var _button = require('antd-mobile/lib/button');

var _button2 = _interopRequireDefault(_button);

var _css2 = require('antd-mobile/lib/input-item/style/css');

var _inputItem = require('antd-mobile/lib/input-item');

var _inputItem2 = _interopRequireDefault(_inputItem);

var _css3 = require('antd-mobile/lib/picker/style/css');

var _picker = require('antd-mobile/lib/picker');

var _picker2 = _interopRequireDefault(_picker);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _css4 = require('antd-mobile/lib/list/style/css');

var _list = require('antd-mobile/lib/list');

var _list2 = _interopRequireDefault(_list);

var _css5 = require('antd-mobile/lib/toast/style/css');

var _toast = require('antd-mobile/lib/toast');

var _toast2 = _interopRequireDefault(_toast);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp; /* eslint-disable */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _rcForm = require('rc-form');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

require('scss/mobile/jobs.component.scss');

var _request = require('common/request');

var _request2 = _interopRequireDefault(_request);

var _utils = require('utils');

var _data = require('./data');

var _data2 = _interopRequireDefault(_data);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var title = '工作信息';

var Jobs = (_temp = _class = function (_Component) {
    (0, _inherits3.default)(Jobs, _Component);

    function Jobs(props) {
        (0, _classCallCheck3.default)(this, Jobs);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Jobs.__proto__ || (0, _getPrototypeOf2.default)(Jobs)).call(this, props));

        _this.state = {
            lock: true,
            // 数据加载完毕
            loaded: false,
            // request loading
            loading: false,
            // 按钮文案
            buttonText: _this.props.READY_TEXT
        };
        var _this$props = _this.props,
            COMPLETED_TEXT = _this$props.COMPLETED_TEXT,
            loaded = _this$props.loaded,
            formatPickerData = _this$props.formatPickerData,
            getButtonText = _this$props.getButtonText,
            route = _this$props.route,
            middleware = _this$props.middleware;
        var buttonText = _this.state.buttonText;

        (0, _request2.default)('credit-card/get-work-info').then(function (response) {
            var _response$data$item = response.data.item,
                name = _response$data$item.company_name,
                address = _response$data$item.company_address,
                street = _response$data$item.company_address_distinct,
                worktype = _response$data$item.company_worktype,
                worktypes = _response$data$item.company_worktype_list;

            loaded();
            worktypes && worktypes.map(formatPickerData);
            buttonText = COMPLETED_TEXT;
            if (address) {
                var temp = [];
                var area = address.split(' ');
                _data2.default.map(function (data) {
                    if (data.label == area[0]) {
                        temp.push(data.value);
                        var childrens = data.children;
                        childrens && childrens.map(function (children) {
                            if (children.label == area[1]) {
                                temp.push(children.value);
                                var _childrens = children.children;
                                _childrens && _childrens.map(function (children) {
                                    if (children.label == area[2]) {
                                        temp.push(children.value);
                                    }
                                });
                            }
                        });
                    }
                });
                address = temp;
            }
            _this.setState({
                name: name,
                address: address,
                street: street,
                worktype: worktype ? [+worktype] : null,
                worktypes: worktypes,
                buttonText: buttonText,
                loaded: 1
            });
        }).catch(middleware);
        return _this;
    }

    (0, _createClass3.default)(Jobs, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            document.title = title;
        }
    }, {
        key: 'submit',
        value: function submit() {
            var _this2 = this;

            var _props = this.props,
                COMPLETED_TEXT = _props.COMPLETED_TEXT,
                nextStepLink = _props.nextStepLink,
                route = _props.route,
                middleware = _props.middleware,
                getButtonText = _props.getButtonText;
            var _props$form = this.props.form,
                getFieldInstance = _props$form.getFieldInstance,
                getFieldsValue = _props$form.getFieldsValue,
                validateFields = _props$form.validateFields;

            validateFields(function (errors, values) {
                if (errors) {
                    for (var i in errors) {
                        var input = errors[i];
                        input.errors && input.errors.map(function (error) {
                            _toast2.default.offline(error.message, 1.5, function () {
                                var element = getFieldInstance(error.field);
                                if (element && element.refs && element.refs.input) {
                                    var _input = element.refs.input;

                                    setTimeout(_input.focus());
                                }
                            });
                        });
                        break;
                    }
                } else {
                    var _state = _this2.state,
                        lock = _state.lock,
                        buttonText = _state.buttonText;

                    var _getFieldsValue = getFieldsValue(),
                        name = _getFieldsValue.name,
                        worktype = _getFieldsValue.worktype,
                        address = _getFieldsValue.address,
                        street = _getFieldsValue.street;

                    if (lock) {
                        _this2.setState({ lock: 0, loaded: 0, loading: 1 });

                        var start = Date.now();
                        if (address && address.length) {
                            var temp = [];
                            _data2.default.map(function (data) {
                                if (data.value == address[0]) {
                                    temp.push(data.label);
                                    var childrens = data.children;
                                    childrens && childrens.map(function (children) {
                                        if (children.value == address[1]) {
                                            temp.push(children.label);
                                            var _childrens2 = children.children;
                                            _childrens2 && _childrens2.map(function (children) {
                                                if (children.value == address[2]) {
                                                    temp.push(children.label);
                                                }
                                            });
                                        }
                                    });
                                }
                            });
                            address = temp.join(' ');
                        }
                        _request2.default.post('credit-card/save-work-info', {
                            company_name: name,
                            company_worktype: worktype[0],
                            company_address: address,
                            company_address_distinct: street
                        }).then(function (response) {
                            var end = Date.now();
                            var timeout = 0;
                            if (end - start < 1000) timeout = 1000;
                            if (end - start > 1000) timeout = 0;
                            var message = response.message;

                            setTimeout(function () {
                                _toast2.default.success(message, 1.5, function () {
                                    buttonText = COMPLETED_TEXT;
                                    setTimeout(nextStepLink(route));
                                });
                                _this2.setState({ lock: 1, loaded: 1, loading: 0, buttonText: buttonText });
                            }, timeout);
                        }).catch(middleware.bind(_this2));
                    }
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                _props2$form = _props2.form,
                getFieldProps = _props2$form.getFieldProps,
                getFieldValue = _props2$form.getFieldValue,
                label = _props2.label;
            var _state2 = this.state,
                lock = _state2.lock,
                loaded = _state2.loaded,
                loading = _state2.loading,
                disabled = _state2.disabled,
                name = _state2.name,
                worktype = _state2.worktype,
                worktypes = _state2.worktypes,
                address = _state2.address,
                street = _state2.street,
                buttonText = _state2.buttonText;

            var editable = !loading && loaded && lock;
            var worktypeValue = getFieldValue('worktype') || worktype;
            return _react2.default.createElement('div', { className: 'jobs' }, _react2.default.createElement(_list2.default, { renderHeader: function renderHeader() {
                    return '为保证借款申请顺利通过，请务必填写真实信息';
                } }, _react2.default.createElement(_picker2.default, (0, _extends3.default)({
                cols: 1,
                disabled: !editable,
                data: worktypes
            }, getFieldProps('worktype', {
                initialValue: worktype,
                rules: [{
                    required: true,
                    message: '请选择工作类型'
                }]
            })), _react2.default.createElement(_list2.default.Item, { arrow: 'horizontal' }, label('工作类型'))), worktypeValue && worktypeValue[0] === 1 ? _react2.default.createElement('div', null, _react2.default.createElement(_inputItem2.default, (0, _extends3.default)({
                editable: editable,
                placeholder: '\u8BF7\u8F93\u5165\u5355\u4F4D\u540D\u79F0'
            }, getFieldProps('name', {
                initialValue: name,
                rules: [{
                    required: true,
                    message: '单位名称不能为空'
                }]
            })), label('单位名称')), _react2.default.createElement(_picker2.default, (0, _extends3.default)({
                disabled: !editable,
                data: _data2.default,
                format: function format(values) {
                    return values.join(' ');
                }
            }, getFieldProps('address', {
                initialValue: address,
                rules: [{
                    required: true,
                    message: '请选择单位所在地'
                }]
            })), _react2.default.createElement(_list2.default.Item, { arrow: 'horizontal' }, label('单位地址'))), _react2.default.createElement(_inputItem2.default, (0, _extends3.default)({
                editable: editable,
                className: 'street',
                placeholder: '\u586B\u5199\u5177\u4F53\u8857\u9053\u95E8\u724C\u53F7'
            }, getFieldProps('street', {
                initialValue: street,
                rules: [{
                    required: true,
                    message: '街道门牌号不能为空'
                }]
            })))) : ''), _react2.default.createElement(_button2.default, {
                type: 'primary'
                // disabled={!lock || disabled || loading}
                , loading: loading,
                className: (0, _classnames2.default)({
                    'button-submit': true,
                    'button-round': true,
                    'button-loading': !loaded
                }),
                onClick: this.submit.bind(this) }, buttonText), _react2.default.createElement('div', { className: 'security' }, '\u94F6\u884C\u7EA7\u6570\u636E\u52A0\u5BC6\u9632\u62A4'));
        }
    }]);
    return Jobs;
}(_react.Component), _class.contextTypes = {
    router: _react2.default.PropTypes.object.isRequired
}, _temp);
exports.default = (0, _rcForm.createForm)()(Jobs);
module.exports = exports['default'];