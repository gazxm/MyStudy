{"version":3,"sources":["src\\js\\pages\\activity\\love\\Barrage.js"],"names":["animTime","Barrage","props","state","barrageData","inputData","timeFlag","randomData","nextProps","setState","i","delayTime","Math","random","totalTime","barrage","refs","setInterval","top","setTimeout","className","floor","style","left","domNode","data","textData","word","innerHTML","length","finalData","map","v","input","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAEA,IAAM,WAAN,AAAiB;;I,AAEI;mCACnB;;mBAAA,AAAa,OAAO;wCAAA;;wIAAA,AACZ,AACN;;UAAA,AAAK;mBAAQ,AACE,AACb;iBAJgB,AAElB,AAAa,AAEA;AAFA,AACX;WAGH;;;;;yCAEqB;UAAA,AACZ,WAAa,KADD,AACM,MADN,AACZ,AACR;;UAAI,aAAJ,AAAiB,GAAG,AAClB;AACD;AACD;WAAA,AAAK,AACN;;;;8C,AAE0B,WAAW;UAAA,AAC5B,WAAa,KADe,AACV,MADU,AAC5B,AACR;;UAAI,aAAJ,AAAiB,GAAG,AAClB;AACD;AAJmC;UAAA,AAK5B,YAL4B,AAKd,UALc,AAK5B,AACR;;UAAA,AAAI,WAAW,AACb;aAAA,AAAK;qBAAL,AAAc,AACD,AAEd;AAHe,AACZ;AAGL;;;;wCAEoB;mBAAA;;UAAA,AACX,WAAa,KADF,AACO,MADP,AACX,AACR;;UAAI,aAAJ,AAAiB,GAAG,AAClB;AACD;AAJkB;;iCAAA,AAKV,GACP;YAAM,YAAY,KAAA,AAAK,WAAvB,AAAkC,AAClC;YAAI,YAAY,WAAhB,AAA2B,AAC3B;eAAA,AAAK,QAAQ,OAAA,AAAK,KAAlB,AAAa,AAAU,IAAvB,AAA2B,WAA3B,AAAsC,AACtC;oBAAY,YAAM,AAChB;iBAAA,AAAK,QAAQ,OAAA,AAAK,KAAlB,AAAa,AAAU,IAAvB,AAA2B,WAA3B,AAAsC,AACvC;AAFD,WAEG,YAXc,AASjB,AAEe;AANjB;;WAAK,IAAL,AAAS,KAAK,KAAd,AAAmB,MAAM;cAAhB,AAAgB,AAOxB;AACF;;;;yCAEqB;mBAAA;;UAAA,AACZ,WAAa,KADD,AACM,MADN,AACZ,AACR;;UAAI,aAAJ,AAAiB,GAAG,AAClB;AACD;AACD;UAAM,MAAM,KAAA,AAAK,WAAjB,AAA4B,AAC5B;iBAAW,YAAM,AACf;eAAA,AAAK,KAAL,AAAU,UAAV,AAAoB,kCAAgC,KAAA,AAAK,MAAM,KAAA,AAAK,WAApE,AAAoD,AAA2B,AAC/E;eAAA,AAAK,KAAL,AAAU,UAAV,AAAoB,MAApB,AAA0B,MAA1B,AAAmC,MACnC;eAAA,AAAK,KAAL,AAAU,UAAV,AAAoB,MAApB,AAA0B,cAAW,KAAA,AAAK,WAAL,AAAgB,IAArD,AAAyD,KAC1D;AAJD,SAAA,AAIG,AACH;iBAAW,YAAM,AACf;eAAA,AAAK,KAAL,AAAU,UAAV,AAAoB,YAApB,AAAgC,AAChC;eAAA,AAAK,KAAL,AAAU,UAAV,AAAoB,MAApB,AAA0B,OAC1B;eAAA,AAAK,KAAL,AAAU,UAAV,AAAoB,MAApB,AAA0B,MAC3B;AAJD,SAIG,WAAA,AAAW,OAJd,AAIqB,AACtB;;;;4B,AAEQ,S,AAAS,W,AAAW,WAAW;UAAA,AAC9B,WAAa,KADiB,AACZ,MADY,AAC9B,AACR;;UAAI,aAAJ,AAAiB,GAAG,AAClB;AACD;AAJqC;UAAA,AAK9B,OAAS,KAAA,AAAK,MALgB,AAKV,KALU,AAK9B,AACR;;UAAM,WAAW,KAAK,KAAA,AAAK,MAAM,KAAA,AAAK,WAArB,AAAK,AAA2B,KAAjD,AAAsD,AACtD;UAAM,MAAM,KAAA,AAAK,WAAjB,AAA4B,AAC5B;cAAA,AAAQ,YAAR,AAAoB,AACpB;iBAAW,YAAM,AACf;gBAAA,AAAQ,MAAR,AAAc,cAAW,KAAA,AAAK,WAAL,AAAgB,IAAzC,AAA6C,KAC7C;gBAAA,AAAQ,MAAR,AAAc,MAAd,AAAuB,MACvB;gBAAA,AAAQ,kCAAgC,KAAA,AAAK,MAAM,KAAA,AAAK,WAAxD,AAAwC,AAA2B,AACpE;AAJD,SAIG,YAJH,AAIe,AACf;iBAAW,YAAM,AACf;gBAAA,AAAQ,YAAR,AAAoB,AACpB;gBAAA,AAAQ,MAAR,AAAc,OACd;gBAAA,AAAQ,MAAR,AAAc,MACf;AAJD,SAIG,YAJH,AAIe,AAChB;;;;iCAEa;wBACa,KAAA,AAAK,MADlB,AACwB;UADxB,AACJ,mBADI,AACJ;UADI,AACE,qBADF,AACE,AACd;;UAAI,YAAJ,AAAgB,AAChB;WAAK,IAAI,IAAT,AAAa,GAAG,IAAhB,AAAoB,QAApB,AAA4B,KAAK,AAC/B;+DAAA,AAAgB,YAAc,CAAC,KAAK,KAAA,AAAK,MAAM,KAAA,AAAK,WAApD,AAA8B,AAAC,AAAK,AAA2B,AAChE;AACD;WAAA,AAAK;qBAAL,AAAc,AACC,AAEhB;AAHe,AACZ;;;;6BAIM;mBAC2B,KAD3B,AACgC;UADhC,AACA,qBADA,AACA;UADA,AACa,mBADb,AACa;UADb,AAEA,WAAa,KAFb,AAEkB,MAFlB,AAEA,AACR;;UAAM,yBAAyB,aAAf,AAA4B,gBAAI,AAAY,IAAI,UAAA,AAAC,GAAD,AAAI,GAAJ;eAAU,gBAAA,cAAA,SAAK,KAAL,AAAU,GAAG,iBAAb,AAA4B,AAAM,OAA5C,AAAU,AAAoC;AAA9F,AAAgC,OAAA,CAAhC,GAAhB,AAA6H,AAC7H;UAAM,QAAQ,YAAY,gBAAA,cAAA,SAAK,KAAL,AAAS,AAAa,eAAlC,AAAY,aAA1B,AAAmE,AAEnE;;aACE,gBAAA,cAAA,SAAK,WAAL,AAAe,AACb,6BAAA,cAAA,SAAK,WAAL,AAAe,AACZ,qBADH,AAEG,SAJP,AACE,AACE,AAML;;;;EA7GkC,gBAAM,A;;kBAAtB,A","file":"Barrage.js","sourceRoot":"E:/MyStudy/Redux/app_four","sourcesContent":["import React from 'react'\r\n\r\nconst animTime = 8\r\n\r\nexport default class Barrage extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      barrageData: [],\r\n      inputData: ''\r\n    }\r\n  }\r\n\r\n  componentWillMount () {\r\n    const { timeFlag } = this.props\r\n    if (timeFlag !== 0) {\r\n      return\r\n    }\r\n    this.randomData()\r\n  }\r\n\r\n  componentWillReceiveProps (nextProps) {\r\n    const { timeFlag } = this.props\r\n    if (timeFlag !== 0) {\r\n      return\r\n    }\r\n    const { inputData } = nextProps\r\n    if (inputData) {\r\n      this.setState({\r\n        inputData: inputData\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    const { timeFlag } = this.props\r\n    if (timeFlag !== 0) {\r\n      return\r\n    }\r\n    for (let i in this.refs) {\r\n      const delayTime = Math.random() * 10\r\n      let totalTime = animTime + delayTime\r\n      this.barrage(this.refs[i], delayTime, totalTime)\r\n      setInterval(() => {\r\n        this.barrage(this.refs[i], delayTime, totalTime)\r\n      }, totalTime * 1000)\r\n    }\r\n  }\r\n\r\n  componentDidUpdate () {\r\n    const { timeFlag } = this.props\r\n    if (timeFlag !== 0) {\r\n      return\r\n    }\r\n    const top = Math.random() * 1.2\r\n    setTimeout(() => {\r\n      this.refs.inputData.className = `transition color-${Math.floor(Math.random() * 3)}`\r\n      this.refs.inputData.style.top = `${top}rem`\r\n      this.refs.inputData.style.left = `-${Math.random() * 5 + 5}rem`\r\n    }, 100)\r\n    setTimeout(() => {\r\n      this.refs.inputData.className = ''\r\n      this.refs.inputData.style.left = ``\r\n      this.refs.inputData.style.top = ``\r\n    }, animTime * 1000 + 100)\r\n  }\r\n\r\n  barrage (domNode, delayTime, totalTime) {\r\n    const { timeFlag } = this.props\r\n    if (timeFlag !== 0) {\r\n      return\r\n    }\r\n    const { data } = this.props.data\r\n    const textData = data[Math.floor(Math.random() * 50)].word\r\n    const top = Math.random() * 1.5\r\n    domNode.innerHTML = textData\r\n    setTimeout(() => {\r\n      domNode.style.left = `-${Math.random() * 5 + 5}rem`\r\n      domNode.style.top = `${top}rem`\r\n      domNode.className = `transition color-${Math.floor(Math.random() * 3)}`\r\n    }, delayTime * 1000)\r\n    setTimeout(() => {\r\n      domNode.className = ''\r\n      domNode.style.left = ``\r\n      domNode.style.top = ``\r\n    }, totalTime * 1000)\r\n  }\r\n\r\n  randomData () {\r\n    const { data, length } = this.props.data\r\n    let finalData = []\r\n    for (let i = 0; i < length; i++) {\r\n      finalData = [...finalData, ...[data[Math.floor(Math.random() * 50)]]]\r\n    }\r\n    this.setState({\r\n      barrageData: finalData\r\n    })\r\n  }\r\n\r\n  render () {\r\n    const { barrageData, inputData } = this.state\r\n    const { timeFlag } = this.props\r\n    const barrage = barrageData && timeFlag === 0 ? barrageData.map((v, i) => <div key={i} ref={`barrage${i}`}>{v.word}</div>) : null\r\n    const input = inputData ? <div ref='inputData'>{inputData}</div> : null\r\n\r\n    return (\r\n      <div className='barrage'>\r\n        <div className='barrage-content'>\r\n          {barrage}\r\n          {input}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]}