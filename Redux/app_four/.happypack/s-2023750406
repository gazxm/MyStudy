'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _css = require('antd-mobile/lib/picker/style/css');

var _picker = require('antd-mobile/lib/picker');

var _picker2 = _interopRequireDefault(_picker);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _css2 = require('antd-mobile/lib/list/style/css');

var _list = require('antd-mobile/lib/list');

var _list2 = _interopRequireDefault(_list);

var _css3 = require('antd-mobile/lib/input-item/style/css');

var _inputItem = require('antd-mobile/lib/input-item');

var _inputItem2 = _interopRequireDefault(_inputItem);

var _css4 = require('antd-mobile/lib/toast/style/css');

var _toast = require('antd-mobile/lib/toast');

var _toast2 = _interopRequireDefault(_toast);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _css5 = require('antd-mobile/lib/button/style/css');

var _button = require('antd-mobile/lib/button');

var _button2 = _interopRequireDefault(_button);

var _class, _temp; /* eslint-disable */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _rcForm = require('rc-form');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

require('scss/mobile/bank.component.scss');

var _request = require('common/request');

var _request2 = _interopRequireDefault(_request);

var _utils = require('utils');

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var title = '银行卡';

var VERIFY_INIT_TEXT = '获取验证码';
var VERIFY_WAITING_TEXT = '%s秒重新获取';
var VERIFY_RETRY_TEXT = '重新获取';

var timer = void 0;
function countdown(number) {
    var verify = this.state.verify;

    verify.text = VERIFY_WAITING_TEXT.replace(/\%s/, number);
    this.setState({ verify: verify });
}

function verifyCode() {
    var _state = this.state,
        lock = _state.lock,
        verify = _state.verify;

    return _react2.default.createElement(_button2.default, {
        type: 'primary',
        loading: verify.loading,
        disabled: !lock || !verify.lock,
        onClick: this.sendVerifyCode.bind(this) }, verify.text);
}

var Bank = (_temp = _class = function (_Component) {
    (0, _inherits3.default)(Bank, _Component);

    function Bank(props) {
        (0, _classCallCheck3.default)(this, Bank);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Bank.__proto__ || (0, _getPrototypeOf2.default)(Bank)).call(this, props));

        _this.state = {
            lock: true,
            // 数据加载完毕
            loaded: false,
            // request loading
            loading: false,
            verify: {
                lock: true,
                loading: false,
                text: VERIFY_INIT_TEXT
            },
            // 按钮文案
            buttonText: _this.props.READY_TEXT
        };
        return _this;
    }

    (0, _createClass3.default)(Bank, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            document.title = title;
            var _props = this.props,
                step = _props.step,
                loaded = _props.loaded,
                formatPickerData = _props.formatPickerData,
                middleware = _props.middleware,
                hideSteps = _props.hideSteps,
                getButtonText = _props.getButtonText,
                route = _props.route;
            var buttonText = this.state.buttonText;
            var router = this.context.router;

            (0, _request2.default)('credit-card/get-bank-card').then(function (response) {
                var _response$data = response.data,
                    name = _response$data.name,
                    item = _response$data.item,
                    banks = _response$data.list,
                    disabled = _response$data.real_verify_status,
                    verify_loan_pass = _response$data.verify_loan_pass;

                loaded();
                banks && banks.map(formatPickerData);
                buttonText = getButtonText(route);

                _this2.setState({
                    name: name,
                    bank: item[0],
                    banks: banks,
                    disabled: disabled,
                    buttonText: buttonText,
                    loaded: 1
                });
            }).catch(middleware.bind(this));
        }
    }, {
        key: 'submit',
        value: function submit() {
            var _this3 = this;

            var _props2 = this.props,
                COMPLETED_TEXT = _props2.COMPLETED_TEXT,
                nextStepLink = _props2.nextStepLink,
                route = _props2.route,
                middleware = _props2.middleware;
            var _props$form = this.props.form,
                getFieldInstance = _props$form.getFieldInstance,
                getFieldsValue = _props$form.getFieldsValue,
                validateFields = _props$form.validateFields;

            validateFields(function (errors, values) {
                if (errors) {
                    for (var i in errors) {
                        var input = errors[i];
                        input.errors && input.errors.map(function (error) {
                            _toast2.default.offline(error.message, 1.5, function () {
                                var element = getFieldInstance(error.field);
                                if (element && element.refs && element.refs.input) {
                                    var _input = element.refs.input;

                                    setTimeout(_input.focus());
                                }
                            });
                        });
                        break;
                    }
                } else {
                    var _state2 = _this3.state,
                        lock = _state2.lock,
                        bank = _state2.bank,
                        status = _state2.status,
                        disabled = _state2.disabled,
                        buttonText = _state2.buttonText;

                    var _getFieldsValue = getFieldsValue(),
                        bank_id = _getFieldsValue.bank_id,
                        card_no = _getFieldsValue.bank_card_number,
                        phone = _getFieldsValue.phone,
                        code = _getFieldsValue.code;

                    if (lock) {
                        _this3.setState({ lock: 0, loaded: 0, loading: 1 });
                        var api = bank && disabled ? (0, _utils.resolveUrl)('http://m.xianjincard.com/loan/do-bind-card') : 'credit-card/add-bank-card';
                        var start = Date.now();
                        _request2.default.post(api, {
                            card_no: card_no,
                            bank_id: bank_id[0],
                            phone: phone,
                            code: code
                        }).then(function (response) {
                            var end = Date.now();
                            var timeout = 0;
                            if (end - start < 1000) timeout = 1000;
                            if (end - start > 1000) timeout = 0;
                            var message = response.message;

                            setTimeout(function () {
                                _toast2.default.success(message, 1.5, function () {
                                    buttonText = COMPLETED_TEXT;
                                    if (_utils.platform.isApp) {
                                        (0, _utils.hrefNative)(12);
                                    } else {
                                        setTimeout(nextStepLink(route));
                                    }
                                });
                                _this3.setState({ lock: 1, loaded: 1, loading: 0, disabled: 1, buttonText: buttonText });
                            }, timeout);
                        }).catch(middleware.bind(_this3));
                    }
                }
            });
        }
    }, {
        key: 'sendVerifyCode',
        value: function sendVerifyCode() {
            var _this4 = this;

            var count = 60;
            var _state3 = this.state,
                verify = _state3.verify,
                _state3$bank = _state3.bank,
                bank = _state3$bank === undefined ? {} : _state3$bank;
            var _props$form2 = this.props.form,
                getFieldValue = _props$form2.getFieldValue,
                getFieldInstance = _props$form2.getFieldInstance,
                getFieldError = _props$form2.getFieldError,
                isFieldTouched = _props$form2.isFieldTouched;

            var phone = getFieldValue('phone');
            var field = getFieldError('phone');
            if (!field && !isFieldTouched('phone') && !phone || field && field.length) {
                _toast2.default.offline(field ? field.join('') : '银行预留手机号不能为空', 1.5, function () {
                    var _getFieldInstance = getFieldInstance('phone'),
                        element = _getFieldInstance.refs;

                    if (element && element.input) {
                        element.input.focus();
                    }
                });
                return;
            }
            verify.lock = false;
            verify.loading = true;
            this.setState({ verify: verify });

            var start = Date.now();
            _request2.default.post('credit-card/get-code', {
                phone: phone
            }).then(function (response) {
                var end = Date.now();
                var timeout = 0;
                if (end - start < 1000) timeout = 1000;
                if (end - start > 1000) timeout = 0;
                setTimeout(function () {
                    verify.loading = false;
                    _this4.setState({ verify: verify });

                    countdown.apply(_this4, [count]);
                    timer = setInterval(function () {
                        countdown.apply(_this4, [--count]);
                        if (!!!count) {
                            timer && clearInterval(timer);
                            verify.lock = 1;
                            verify.text = VERIFY_RETRY_TEXT;
                            _this4.setState({ verify: verify });
                        }
                    }, 1000);
                }, timeout);
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props3 = this.props,
                getFieldProps = _props3.form.getFieldProps,
                label = _props3.label;
            var _state4 = this.state,
                lock = _state4.lock,
                loaded = _state4.loaded,
                loading = _state4.loading,
                disabled = _state4.disabled,
                name = _state4.name,
                _state4$bank = _state4.bank,
                bank = _state4$bank === undefined ? {} : _state4$bank,
                banks = _state4.banks,
                buttonText = _state4.buttonText,
                verify = _state4.verify;

            var editable = !loading && loaded && lock;
            return _react2.default.createElement('div', { className: 'bank' }, _react2.default.createElement(_list2.default, { renderHeader: function renderHeader() {
                    return '请填写银行卡信息';
                } }, _react2.default.createElement(_inputItem2.default, { value: name, editable: false }, label('持卡人')), _react2.default.createElement(_picker2.default, (0, _extends3.default)({
                cols: 1,
                disabled: !editable,
                data: banks
            }, getFieldProps('bank_id', {
                initialValue: bank.bank_id ? [+bank.bank_id] : null,
                rules: [{
                    required: true,
                    message: '请选择银行'
                }]
            })), _react2.default.createElement(_list2.default.Item, { arrow: 'horizontal' }, label('选择银行'))), _react2.default.createElement(_inputItem2.default, (0, _extends3.default)({
                type: 'number',
                editable: editable,
                placeholder: '\u8BF7\u8F93\u5165\u94F6\u884C\u5361\u53F7'
            }, getFieldProps('bank_card_number', {
                initialValue: bank.card_no,
                rules: [{
                    required: true,
                    message: '银行卡号不能为空'
                }, {
                    pattern: /^(\d{16}|\d{19})$/,
                    message: '银行卡号只能16或19位数字'
                }]
            })), label('银行卡号')), _react2.default.createElement(_inputItem2.default, (0, _extends3.default)({
                type: 'number',
                editable: editable && verify.lock,
                placeholder: '\u8BF7\u8F93\u5165\u94F6\u884C\u9884\u7559\u624B\u673A\u53F7'
            }, getFieldProps('phone', {
                initialValue: bank.phone,
                rules: [{
                    required: true,
                    message: '银行预留手机号不能为空'
                }, {
                    len: 11,
                    message: '请输入正确的银行预留手机号'
                }]
            })), label('手机号')), _react2.default.createElement(_inputItem2.default, (0, _extends3.default)({
                className: 'verify_code',
                extra: verifyCode.apply(this),
                editable: editable,
                placeholder: '\u8BF7\u8F93\u5165\u9A8C\u8BC1\u7801'
            }, getFieldProps('code', {
                rules: [{
                    required: true,
                    message: '验证码不能为空'
                }]
            })), label('验证码'))), _react2.default.createElement(_button2.default, {
                type: 'primary'
                // disabled={!lock || disabled || loading}
                , loading: loading,
                className: (0, _classnames2.default)({
                    'button-submit': true,
                    'button-round': true,
                    'button-loading': !loaded
                }),
                onClick: this.submit.bind(this) }, buttonText), _react2.default.createElement('div', { className: 'security' }, '\u94F6\u884C\u7EA7\u6570\u636E\u52A0\u5BC6\u9632\u62A4'));
        }
    }]);
    return Bank;
}(_react.Component), _class.contextTypes = {
    router: _react2.default.PropTypes.object.isRequired
}, _temp);
;

exports.default = (0, _rcForm.createForm)()(Bank);
module.exports = exports['default'];