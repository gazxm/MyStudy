{"version":3,"sources":["src\\js\\pages\\mobile\\certification\\bank.js"],"names":["title","VERIFY_INIT_TEXT","VERIFY_WAITING_TEXT","VERIFY_RETRY_TEXT","timer","countdown","number","verify","state","text","replace","setState","verifyCode","lock","loading","sendVerifyCode","bind","Bank","props","loaded","buttonText","READY_TEXT","document","step","formatPickerData","middleware","hideSteps","getButtonText","route","router","context","then","response","data","name","item","banks","list","disabled","real_verify_status","verify_loan_pass","map","bank","catch","COMPLETED_TEXT","nextStepLink","form","getFieldInstance","getFieldsValue","validateFields","errors","values","i","input","offline","error","message","element","field","refs","setTimeout","focus","status","bank_id","card_no","bank_card_number","phone","code","api","start","Date","now","post","end","timeout","success","isApp","count","getFieldValue","getFieldError","isFieldTouched","length","join","apply","setInterval","clearInterval","getFieldProps","label","editable","initialValue","rules","required","pattern","len","submit","contextTypes","PropTypes","object","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBAAA;;AACA;;;;AAEA;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAM,QAAN,AAAc;;AAEd,IAAM,mBAAN,AAAyB;AACzB,IAAM,sBAAN,AAA4B;AAC5B,IAAM,oBAAN,AAA0B;;AAE1B,IAAI,aAAJ;AACA,SAAA,AAAS,UAAT,AAAmB,QAAO;QAAA,AACjB,SAAU,KADO,AACF,MADE,AACjB,AACL;;WAAA,AAAO,OAAO,oBAAA,AAAoB,QAApB,AAA4B,OAA1C,AAAc,AAAmC,AACjD;SAAA,AAAK,SAAS,EAAC,QAAf,AAAc,AACjB;;;AAED,SAAA,AAAS,aAAY;iBACI,KADJ,AACS;QADT,AACZ,cADY,AACZ;QADY,AACN,gBADM,AACN,AACX;;WACI,gBAAA,uBAAA;cAAA,AACK,AACL,SADA;iBACS,OAFT,AAEgB,AAChB;kBAAU,CAAA,AAAC,QAAQ,CAAC,OAHpB,AAG2B,AAC3B;iBAAS,KAAA,AAAK,eAAL,AAAoB,KAJ7B,AAIS,AAAyB,AAAQ,gBAL9C,AACI,AAIiD,AAExD;;;I,AAEK;kCAkBF;;kBAAA,AAAY,OAAM;4CAAA;;sIAAA,AACR;;cAfV,AAckB;kBAdV,AACE,AACN;AACA;oBAHI,AAGI,AACR;AACA;qBALI,AAKK,AACT;;sBAAQ,AACE,AACN;yBAFI,AAEK,AACT;sBATA,AAMI,AAGE,AAEV;AALQ,AACJ;AAKJ;wBAAY,MAAA,AAAK,MAZb,AAYmB,AAET;AAdV,AACJ;eAeH;;;;;4CACkB;yBACf;;qBAAA,AAAS,QADM,AACf,AAAiB;yBACmE,KAFrE,AAE0E;gBAF1E,AAEV,cAFU,AAEV;gBAFU,AAEJ,gBAFI,AAEJ;gBAFI,AAEI,0BAFJ,AAEI;gBAFJ,AAEsB,oBAFtB,AAEsB;gBAFtB,AAEkC,mBAFlC,AAEkC;gBAFlC,AAE6C,uBAF7C,AAE6C;gBAF7C,AAE4D,eAF5D,AAE4D;gBAF5D,AAGV,aAAc,KAHJ,AAGS,MAHT,AAGV;gBAHU,AAIV,SAAU,KAJA,AAIK,QAJL,AAIV,AAEL;;mCAAA,AAAQ,6BAAR,AAAqC,KAAK,oBAAY;qCAC8B,SAD9B,AACuC;oBADvC,AAC7C,sBAD6C,AAC7C;oBAD6C,AACvC,sBADuC,AACvC;oBADuC,AAC3B,uBAD2B,AACjC;oBADiC,AACA,0BADA,AACpB;oBADoB,AACU,kCADV,AACU,AAC5D;;AACA;yBAAS,MAAA,AAAM,IAAf,AAAS,AAAU,AACnB;6BAAa,cAAb,AAAa,AAAc,AAE3B;;uBAAA,AAAK;0BAAS,AAEV;0BAAM,KAFI,AAEJ,AAAK,AACX;2BAHU,AAIV;8BAJU,AAKV;gCALU,AAMV;4BANJ,AAAc,AAMF,AAEf;AARiB,AACV;AAPR,eAAA,AAcG,MAAM,WAAA,AAAW,KAdpB,AAcS,AAAgB,AAC5B;;;;iCACO;yBAAA;;0BACoD,KADpD,AACyD;gBADzD,AACC,yBADD,AACC;gBADD,AACiB,uBADjB,AACiB;gBADjB,AAC+B,gBAD/B,AAC+B;gBAD/B,AACsC,qBADtC,AACsC;8BACe,KAAA,AAAK,MAF1D,AAEgE;gBAFhE,AAEC,+BAFD,AAEC;gBAFD,AAEmB,6BAFnB,AAEmB;gBAFnB,AAEmC,6BAFnC,AAEmC,AACvC;;2BAAe,UAAA,AAAC,QAAD,AAAS,QAAW,AAC/B;oBAAA,AAAG,QAAO,AACN;yBAAI,IAAJ,AAAQ,KAAR,AAAa,QAAO,AAChB;4BAAI,QAAQ,OAAZ,AAAY,AAAO,AACnB;8BAAA,AAAM,gBAAU,AAAM,OAAN,AAAa,IAAI,iBAAS,AACtC;4CAAA,AAAM,QAAQ,MAAd,AAAoB,SAApB,AAA6B,KAAK,YAAM,AACpC;oCAAI,UAAU,iBAAiB,MAA/B,AAAc,AAAuB,AACrC;oCAAG,WAAW,QAAX,AAAmB,QAAQ,QAAA,AAAQ,KAAtC,AAA2C,OAAM;wCAAA,AACxC,SAAS,QAD+B,AACvB,KADuB,AACxC,AACL;;+CAAW,OAAX,AAAW,AAAM,AACpB;AACJ;AAND,AAOH;AARD,AAAgB,AAShB,yBATgB;AAUnB;AACJ;AAdD,uBAcK;kCACgD,OADhD,AACqD;wBADrD,AACI,eADJ,AACI;wBADJ,AACU,eADV,AACU;wBADV,AACgB,iBADhB,AACgB;wBADhB,AACwB,mBADxB,AACwB;wBADxB,AACkC,qBADlC,AACkC;;0CADlC,AAEuD;wBAFvD,AAEI,0BAFJ,AAEI;wBAFJ,AAE+B,0BAF/B,AAEa;wBAFb,AAEwC,wBAFxC,AAEwC;wBAFxC,AAE+C,uBAF/C,AAE+C,AAChD;;wBAAA,AAAG,MAAK,AACJ;+BAAA,AAAK,SAAS,EAAC,MAAD,AAAO,GAAG,QAAV,AAAkB,GAAG,SAAnC,AAAc,AAA8B,AAC5C;4BAAI,MAAO,QAAD,AAAS,WAAY,uBAArB,AAAqB,AAAI,gDAAnC,AAAmF,AACnF;4BAAI,QAAQ,KAAZ,AAAY,AAAK,AACjB;0CAAA,AAAQ,KAAR,AAAa;qCAAK,AAEd;qCAAS,QAFK,AAEL,AAAQ,AACjB;mCAHc,AAId;kCAJJ,AAAkB;AAAA,AACd,2BADJ,AAKG,KAAK,oBAAY,AAChB;gCAAI,MAAM,KAAV,AAAU,AAAK,AACf;gCAAI,UAAJ,AAAc,AACd;gCAAG,MAAA,AAAM,QAAT,AAAiB,MAAM,UAAA,AAAU,AACjC;gCAAG,MAAA,AAAM,QAAT,AAAiB,MAAM,UAJP,AAIO,AAAU;gCAJjB,AAKX,UALW,AAKA,SALA,AAKX,AACL;;uCAAW,YAAM,AACb;gDAAA,AAAM,QAAN,AAAc,SAAd,AAAuB,KAAK,YAAM,AAC9B;iDAAA,AAAa,AACb;wCAAG,gBAAH,AAAY,OAAM,AACd;+DAAA,AAAO,AACV;AAFD,2CAEK,AACD;mDAAW,aAAX,AAAW,AAAa,AAC3B;AACJ;AAPD,AAQA;uCAAA,AAAK,SAAS,EAAC,MAAD,AAAO,GAAG,QAAV,AAAkB,GAAG,SAArB,AAA8B,GAAG,UAAjC,AAA2C,GAAG,YAA5D,AAAc,AACjB;AAVD,+BAAA,AAUG,AACN;AAtBD,2BAAA,AAsBG,MAAM,WAAA,AAAW,KAtBpB,AAwBH;AAEJ;AACJ;AAjDD,AAkDH;;;;yCACe;yBACZ;;gBAAI,QADQ,AACZ,AAAY;0BACc,KAFd,AAEmB;gBAFnB,AAEP,iBAFO,AAEP;uCAFO,AAEC;gBAFD,AAEC,oCAFD,AAEQ,KAFR;+BAG2D,KAAA,AAAK,MAHhE,AAGsE;gBAHtE,AAGP,6BAHO,AAGP;gBAHO,AAGQ,gCAHR,AAGQ;gBAHR,AAG0B,6BAH1B,AAG0B;gBAH1B,AAGyC,8BAHzC,AAGyC,AAErD;;gBAAI,QAAQ,cAAZ,AAAY,AAAc,AAC1B;gBAAI,QAAQ,cAAZ,AAAY,AAAc,AAC1B;gBAAI,CAAA,AAAC,SAAS,CAAC,eAAX,AAAW,AAAe,YAAY,CAAvC,AAAwC,SAAW,SAAS,MAA/D,AAAqE,QAAQ,AACzE;gCAAA,AAAM,QAAQ,QAAQ,MAAA,AAAM,KAAd,AAAQ,AAAW,MAAjC,AAAuC,eAAvC,AAAsD,KAAK,YAAM;4CACvC,iBADuC,AACvC,AAAiB;wBADsB,AAClD,4BADkD,AACxD,AACL;;wBAAG,WAAW,QAAd,AAAsB,OAAM,AACxB;gCAAA,AAAQ,MAAR,AAAc,AACjB;AACJ;AALD,AAMA;AACH;AACD;mBAAA,AAAO,OAAP,AAAc,AACd;mBAAA,AAAO,UAAP,AAAiB,AACjB;iBAAA,AAAK,SAAS,EAAC,QAAf,AAAc,AAEd;;gBAAI,QAAQ,KAAZ,AAAY,AAAK,AACjB;8BAAA,AAAQ,KAAR,AAAa;uBAAb,AAAqC;AAAA,AACjC,eADJ,AAEG,KAAK,oBAAY,AAChB;oBAAI,MAAM,KAAV,AAAU,AAAK,AACf;oBAAI,UAAJ,AAAc,AACd;oBAAG,MAAA,AAAM,QAAT,AAAiB,MAAM,UAAA,AAAU,AACjC;oBAAG,MAAA,AAAM,QAAT,AAAiB,MAAM,UAAA,AAAU,AACjC;2BAAW,YAAM,AACb;2BAAA,AAAO,UAAP,AAAiB,AACjB;2BAAA,AAAK,SAAS,EAAC,QAAf,AAAc,AAEd;;8BAAA,AAAU,cAAY,CAAtB,AAAsB,AAAC,AACvB;wCAAoB,YAAM,AACtB;kCAAA,AAAU,cAAY,CAAC,EAAvB,AAAsB,AAAG,AACzB;4BAAG,CAAC,CAAC,CAAL,AAAM,OAAM,AACR;qCAAS,cAAT,AAAS,AAAc,AACvB;mCAAA,AAAO,OAAP,AAAc,AACd;mCAAA,AAAO,OAAP,AAAc,AACd;mCAAA,AAAK,SAAS,EAAC,QAAf,AAAc,AACjB;AACJ;AARO,qBAAA,EAAR,AAAQ,AAQL,AACN;AAdD,mBAAA,AAcG,AACN;AAtBD,AAuBH;;;;iCACO;0BACiC,KADjC,AACsC;gBADtC,AACQ,wBADR,AACC,KADD,AACQ;gBADR,AACwB,gBADxB,AACwB;0BAWxB,KAZA,AAYK;gBAZL,AAGA,eAHA,AAGA;gBAHA,AAIA,iBAJA,AAIA;gBAJA,AAKA,kBALA,AAKA;gBALA,AAMA,mBANA,AAMA;gBANA,AAOA,eAPA,AAOA;uCAPA,AAQA;gBARA,AAQA,oCARA,AAQO,KARP;gBAAA,AASA,gBATA,AASA;gBATA,AAUA,qBAVA,AAUA;gBAVA,AAWA,iBAXA,AAWA,AAEJ;;gBAAI,WAAW,CAAA,AAAC,WAAD,AAAY,UAA3B,AAAqC,AACrC;mBACI,gBAAA,cAAA,SAAK,WAAL,AAAe,AACX,0BAAA,qBAAA,WAAM,cAAc,wBAAA;2BAAA,AAAM;AAA1B,AACI,qCAAA,0BAAA,WAAW,OAAX,AAAkB,MAAM,UAAxB,AAAkC,AAAQ,eAD9C,AACI,AAA0C,AAAM,AAChD,yBAAA,uBAAA;sBAAA,AACM,AACN;0BAAU,CAFV,AAEW,AACX;sBAHA,AAGM;AAFN,6BAGI,AAAc;8BACC,KAAA,AAAK,UAAU,CAAC,CAAC,KAAjB,AAAe,AAAO,WADZ,AACuB,AAChD;;8BAAQ,AACM,AACV;6BARR,AAII,AAAyB,AAElB,AAAC,AAEK,AAGb;AALQ,AACJ,iBADG;AAFkB,AACzB,aADA,oBAOA,6BAAA,AAAM,QAAK,OAAX,AAAiB,AAAc,sBAbvC,AAEI,AAWI,AAA+B,AAAM,AAEzC,2BAAA,0BAAA;sBAAA,AACK,AACL;0BAFA,AAEU,AACV;6BAHA,AAGY;AAFZ,6BAGI,AAAc;8BACA,KADoB,AACf,AACnB;;8BAAQ,AACM,AACV;6BAFG,AAAC,AAEK;AAFL,AACJ,iBADG;6BAGJ,AACU,AACT;6BAXR,AAII,AAAkC,AAE3B,AAGJ,AAEU,AAEZ;AAJE,AACC;AAN8B,AAClC,aADA,UAnBR,AAeI,AAaK,AAAM,AACX,0BAAA,0BAAA;sBAAA,AACK,AACL;0BAAU,YAAY,OAFtB,AAE6B,AAC7B;6BAHA,AAGY;AAFZ,6BAGI,AAAc;8BACA,KADS,AACJ,AACnB;;8BAAQ,AACM,AACV;6BAFG,AAAC,AAEK;AAFL,AACJ,iBADG;yBAGJ,AACM,AACL;6BAXR,AAII,AAAuB,AAEhB,AAGJ,AAEU,AAEZ;AAJE,AACC;AANmB,AACvB,aADA,UAjCR,AA6BI,AAaK,AAAM,AACX,yBAAA,0BAAA;2BAAA,AACU,AACV;uBAAO,WAAA,AAAW,MAFlB,AAEO,AAAiB,AACxB;0BAHA,AAGU,AACV;6BAJA,AAIY;AAHZ,6BAII,AAAc;;8BACN,AACM,AACV;6BARR,AAKI,AAAsB,AACf,AAAC,AAEK,AAEZ;AAJO,AACJ,iBADG;AADe,AACtB,aADA,UAjDZ,AACI,AA2CI,AAUK,AAAM,AAEf,0BAAA,uBAAA;sBACK,AACL;AAFA;AACA,kBAEA,SAHA,AAGS,AACT;;qCAAsB,AACD,AACjB;oCAFkB,AAEF,AAChB;sCAAkB,CAPtB,AAIW,AAAW,AAGC,AAGvB;AANsB,AAClB,iBADO;yBAMF,KAAA,AAAK,OAAL,AAAY,KAVrB,AAUS,AAAiB,AAAQ,SAlEtC,AAwDI,AAWA,6BAAA,cAAA,SAAK,WAAL,AAAe,cApEvB,AACI,AAmEI,AAGX;;;;4BAlOM,A;YACK,gBAAA,AAAM,UAAN,AAAgB,O,AADN,AACa;AADb,AAClB;AAkOP;;kBAEc,0BAAA,AAAa,A","file":"bank.js","sourceRoot":"E:/MyStudy/Redux/app_four","sourcesContent":["/* eslint-disable */\r\nimport React, {Component, createClass} from 'react';\r\nimport {List, InputItem, Button, Picker, Toast} from 'antd-mobile';\r\nimport {createForm} from 'rc-form';\r\nimport classnames from 'classnames';\r\nimport 'scss/mobile/bank.component.scss';\r\nimport request from 'common/request';\r\nimport {resolveUrl as url, redirect, hrefNative as native, platform} from 'utils';\r\n\r\nconst title = '银行卡';\r\n\r\nconst VERIFY_INIT_TEXT = '获取验证码';\r\nconst VERIFY_WAITING_TEXT = '%s秒重新获取';\r\nconst VERIFY_RETRY_TEXT = '重新获取';\r\n\r\nlet timer;\r\nfunction countdown(number){\r\n    let {verify} = this.state;\r\n    verify.text = VERIFY_WAITING_TEXT.replace(/\\%s/, number);\r\n    this.setState({verify});\r\n}\r\n\r\nfunction verifyCode(){\r\n    let {lock, verify} = this.state;\r\n    return (\r\n        <Button\r\n        type='primary'\r\n        loading={verify.loading}\r\n        disabled={!lock || !verify.lock}\r\n        onClick={this.sendVerifyCode.bind(this)}>{verify.text}</Button>\r\n    );\r\n}\r\n\r\nclass Bank extends Component{\r\n    static contextTypes = {\r\n        router: React.PropTypes.object.isRequired\r\n    }\r\n    state = {\r\n        lock: true,\r\n        // 数据加载完毕\r\n        loaded: false,\r\n        // request loading\r\n        loading: false,\r\n        verify: {\r\n            lock: true,\r\n            loading: false,\r\n            text: VERIFY_INIT_TEXT\r\n        },\r\n        // 按钮文案\r\n        buttonText: this.props.READY_TEXT\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    componentDidMount(){\r\n        document.title = title;\r\n        let {step, loaded, formatPickerData, middleware, hideSteps, getButtonText, route} = this.props;\r\n        let {buttonText} = this.state;\r\n        let {router} = this.context;\r\n\r\n        request('credit-card/get-bank-card').then(response => {\r\n            let {name, item, list: banks, real_verify_status: disabled, verify_loan_pass} = response.data;\r\n            loaded();\r\n            banks && banks.map(formatPickerData);\r\n            buttonText = getButtonText(route);\r\n\r\n            this.setState({\r\n                name,\r\n                bank: item[0],\r\n                banks,\r\n                disabled,\r\n                buttonText,\r\n                loaded: 1\r\n            });\r\n        }).catch(middleware.bind(this));\r\n    }\r\n    submit(){\r\n        let {COMPLETED_TEXT, nextStepLink, route, middleware} = this.props;\r\n        let {getFieldInstance, getFieldsValue, validateFields} = this.props.form;\r\n        validateFields((errors, values) => {\r\n            if(errors){\r\n                for(let i in errors){\r\n                    let input = errors[i];\r\n                    input.errors && input.errors.map(error => {\r\n                        Toast.offline(error.message, 1.5, () => {\r\n                            let element = getFieldInstance(error.field);\r\n                            if(element && element.refs && element.refs.input){\r\n                                let {input} = element.refs;\r\n                                setTimeout(input.focus());\r\n                            }\r\n                        });\r\n                    });\r\n                    break;\r\n                }\r\n            }else{\r\n                let {lock, bank, status, disabled, buttonText} = this.state;\r\n                let {bank_id, bank_card_number: card_no, phone, code} = getFieldsValue();\r\n                if(lock){\r\n                    this.setState({lock: 0, loaded: 0, loading: 1});\r\n                    let api = (bank && disabled) ? url('http://m.xianjincard.com/loan/do-bind-card') : 'credit-card/add-bank-card';\r\n                    let start = Date.now();\r\n                    request.post(api, {\r\n                        card_no,\r\n                        bank_id: bank_id[0],\r\n                        phone,\r\n                        code\r\n                    }).then(response => {\r\n                        let end = Date.now();\r\n                        let timeout = 0;\r\n                        if(end - start < 1000) timeout = 1000;\r\n                        if(end - start > 1000) timeout = 0;\r\n                        let {message} = response;\r\n                        setTimeout(() => {\r\n                            Toast.success(message, 1.5, () => {\r\n                                buttonText = COMPLETED_TEXT;\r\n                                if(platform.isApp){\r\n                                    native(12);\r\n                                }else{\r\n                                    setTimeout(nextStepLink(route));\r\n                                }\r\n                            });\r\n                            this.setState({lock: 1, loaded: 1, loading: 0, disabled: 1, buttonText});\r\n                        }, timeout);\r\n                    }).catch(middleware.bind(this));\r\n                    \r\n                }\r\n                \r\n            }\r\n        });\r\n    }\r\n    sendVerifyCode(){\r\n        let count = 60;\r\n        let {verify, bank = {}} = this.state;\r\n        let {getFieldValue, getFieldInstance, getFieldError, isFieldTouched} = this.props.form;\r\n\r\n        let phone = getFieldValue('phone');\r\n        let field = getFieldError('phone');\r\n        if((!field && !isFieldTouched('phone') && !phone) || (field && field.length)){\r\n            Toast.offline(field ? field.join('') : '银行预留手机号不能为空', 1.5, () => {\r\n                let {refs: element} = getFieldInstance('phone');\r\n                if(element && element.input){\r\n                    element.input.focus();\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        verify.lock = false;\r\n        verify.loading = true;\r\n        this.setState({verify});\r\n\r\n        let start = Date.now();\r\n        request.post('credit-card/get-code', {\r\n            phone\r\n        }).then(response => {\r\n            let end = Date.now();\r\n            let timeout = 0;\r\n            if(end - start < 1000) timeout = 1000;\r\n            if(end - start > 1000) timeout = 0;\r\n            setTimeout(() => {\r\n                verify.loading = false;\r\n                this.setState({verify});\r\n\r\n                countdown.apply(this, [count]);\r\n                timer = setInterval(() => {\r\n                    countdown.apply(this, [--count]);\r\n                    if(!!!count){\r\n                        timer && clearInterval(timer);\r\n                        verify.lock = 1;\r\n                        verify.text = VERIFY_RETRY_TEXT;\r\n                        this.setState({verify});\r\n                    }\r\n                }, 1000);\r\n            }, timeout);\r\n        });\r\n    }\r\n    render(){\r\n        let {form: {getFieldProps}, label} = this.props;\r\n        let {\r\n            lock,\r\n            loaded,\r\n            loading,\r\n            disabled,\r\n            name,\r\n            bank = {},\r\n            banks,\r\n            buttonText,\r\n            verify\r\n        } = this.state;\r\n        let editable = !loading && loaded && lock;\r\n        return (\r\n            <div className='bank'>\r\n                <List renderHeader={() => '请填写银行卡信息'}>\r\n                    <InputItem value={name} editable={false}>{label('持卡人')}</InputItem>\r\n                    <Picker\r\n                    cols={1}\r\n                    disabled={!editable}\r\n                    data={banks}\r\n                    {...getFieldProps('bank_id', {\r\n                        initialValue: (bank.bank_id ? [+bank.bank_id] : null),\r\n                        rules: [{\r\n                            required: true,\r\n                            message: '请选择银行'\r\n                        }]\r\n                    })}>\r\n                        <List.Item arrow='horizontal'>{label('选择银行')}</List.Item>\r\n                    </Picker>\r\n                    <InputItem\r\n                    type='number'\r\n                    editable={editable}\r\n                    placeholder='请输入银行卡号'\r\n                    {...getFieldProps('bank_card_number', {\r\n                        initialValue: bank.card_no,\r\n                        rules: [{\r\n                            required: true,\r\n                            message: '银行卡号不能为空'\r\n                        }, {\r\n                            pattern: /^(\\d{16}|\\d{19})$/,\r\n                            message: '银行卡号只能16或19位数字'\r\n                        }]\r\n                    })}>{label('银行卡号')}</InputItem>\r\n                    <InputItem\r\n                    type='number'\r\n                    editable={editable && verify.lock}\r\n                    placeholder='请输入银行预留手机号'\r\n                    {...getFieldProps('phone', {\r\n                        initialValue: bank.phone,\r\n                        rules: [{\r\n                            required: true,\r\n                            message: '银行预留手机号不能为空'\r\n                        }, {\r\n                            len: 11,\r\n                            message: '请输入正确的银行预留手机号'\r\n                        }]\r\n                    })}>{label('手机号')}</InputItem>\r\n                    <InputItem\r\n                    className='verify_code'\r\n                    extra={verifyCode.apply(this)}\r\n                    editable={editable}\r\n                    placeholder='请输入验证码'\r\n                    {...getFieldProps('code', {\r\n                        rules: [{\r\n                            required: true,\r\n                            message: '验证码不能为空'\r\n                        }]\r\n                    })}>{label('验证码')}</InputItem>\r\n                </List>\r\n                <Button\r\n                type='primary'\r\n                // disabled={!lock || disabled || loading}\r\n                loading={loading}\r\n                className={classnames({\r\n                    'button-submit': true,\r\n                    'button-round': true,\r\n                    'button-loading': !loaded,\r\n                    // 'button-disabled': disabled\r\n                })}\r\n                onClick={this.submit.bind(this)}>{buttonText}</Button>\r\n                <div className='security'>银行级数据加密防护</div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default createForm()(Bank);"]}