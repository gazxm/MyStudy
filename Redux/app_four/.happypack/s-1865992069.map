{"version":3,"sources":["src\\js\\pages\\mobile\\certification\\information.js"],"names":["title","customRequest","name","config","loading","undefined","file","width","then","props","middleware","setFieldsValue","form","post","action","data","attach","base64","url","response","item","image","Image","src","onload","setState","error","success","message","catch","bind","fail","upload","ocrtype","component","withCredentials","onError","uploadSelfieProps","type","uploadIdCardFrondProps","uploadIdCardBackProps","Information","state","lock","loaded","buttonText","READY_TEXT","document","step","formatPickerData","route","hideSteps","getButtonText","router","context","id_number","is_new_user","selfie","face_recognition_picture","id_card_front","id_number_z_picture","id_card_back","id_number_f_picture","worktype","company_worktype_id","worktypes","company_worktype_list","education","degrees","educations","degrees_all","address","street","address_distinct","liveTime","live_period","liveTimes","live_time_type_all","marriage","marriages","marriage_all","verify_loan_pass","disabled","real_verify_status","map","COMPLETED_TEXT","nextStepLink","getFieldInstance","getFieldsValue","validateFields","force","errors","values","i","input","offline","element","field","refs","setTimeout","focus","start","Date","now","work_type","live_time_type","end","timeout","getFieldProps","getFieldsError","isFieldsTouched","label","editable","backgroundImage","backgroundSize","initialValue","rules","required","pattern","min","max","submit","contextTypes","PropTypes","object","isRequired"],"mappings":"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","file":"information.js","sourceRoot":"E:/MyStudy/Redux/app_four","sourcesContent":["/* eslint-disable */\r\nimport extend from 'extend';\r\nimport lrz from 'lrz';\r\nimport React, {Component, createClass} from 'react';\r\nimport {List, InputItem, Button, Picker, Toast, ImagePicker} from 'antd-mobile';\r\nimport {createForm} from 'rc-form';\r\nimport Upload from 'rc-upload';\r\nimport classnames from 'classnames';\r\nimport 'scss/mobile/information.component.scss';\r\nimport request from 'common/request';\r\nimport {resolveUrl as url, redirect} from 'utils';\r\n\r\nconst title = '个人信息';\r\n\r\nfunction customRequest(name, config){\r\n    Toast.loading(undefined, 0);\r\n    lrz(config.file, {\r\n        width: 640\r\n    }).then(data => {\r\n        let {middleware, form: {setFieldsValue}} = this.props;\r\n        request.post(config.action, extend(config.data, {\r\n            attach: data.base64\r\n        })).then(response => {\r\n            let {item: {url}} = response.data;\r\n            let image = new Image();\r\n                image.src = url;\r\n                image.onload = () => {\r\n                    this.setState({\r\n                        [name]: url\r\n                    });\r\n                }\r\n                image.error = () => {\r\n                    this.setState({\r\n                        [name]: url\r\n                    });\r\n                }\r\n                setFieldsValue({\r\n                    [name]: url\r\n                });\r\n            Toast.success(response.message, 1.5);\r\n        }).catch(middleware.bind(this));\r\n    }).catch(error => {\r\n        Toast.fail('图片上传失败，请重试', 1.5);\r\n    });\r\n}\r\n\r\nconst upload = {\r\n    name: 'attach',\r\n    action: url('http://credit.xianjincard.com/picture/upload-file'),\r\n    data: {\r\n        ocrtype: 4\r\n    },\r\n    component: 'div',\r\n    withCredentials: true,\r\n    onError(error){\r\n        Toast.fail('图片上传失败，请重试');\r\n    }\r\n};\r\n\r\nconst uploadSelfieProps = extend(true, {\r\n    data: {\r\n        type: 100\r\n    }\r\n}, upload);\r\nconst uploadIdCardFrondProps = extend(true, {\r\n    data: {\r\n        type: 110\r\n    }\r\n}, upload);\r\nconst uploadIdCardBackProps = extend(true, {\r\n    data: {\r\n        type: 120\r\n    }\r\n}, upload);\r\n\r\nclass Information extends Component{\r\n    static contextTypes = {\r\n        router: React.PropTypes.object.isRequired\r\n    }\r\n    state = {\r\n        lock: true,\r\n        // 数据加载完毕\r\n        loaded: false,\r\n        // request loading\r\n        loading: false,\r\n        // 按钮文案\r\n        buttonText: this.props.READY_TEXT\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    componentDidMount(){\r\n        document.title = title;\r\n        let {middleware, step, loaded, formatPickerData, route, hideSteps, getButtonText} = this.props;\r\n        let {buttonText} = this.state;\r\n        let {router} = this.context;\r\n\r\n        request('credit-card/get-person-info').then(response => {\r\n            let {\r\n                // 姓名\r\n                name,\r\n                // 身份证号码\r\n                id_number,\r\n                is_new_user,\r\n                face_recognition_picture: selfie,\r\n                id_number_z_picture: id_card_front,\r\n                id_number_f_picture: id_card_back,\r\n                company_worktype_id: worktype,\r\n                company_worktype_list: worktypes,\r\n                // 学历选中\r\n                degrees: education,\r\n                // 学历列表\r\n                degrees_all: educations,\r\n                // 现居地址\r\n                address,\r\n                address_distinct: street,\r\n                // 居住时长选中\r\n                live_period: liveTime,\r\n                // 居住时长列表\r\n                live_time_type_all: liveTimes,\r\n                // 婚姻状况选中\r\n                marriage,\r\n                // 婚姻状况列表\r\n                marriage_all: marriages,\r\n                verify_loan_pass,\r\n                real_verify_status: disabled\r\n            } = response.data.item;\r\n            loaded();\r\n            [worktypes, educations, marriages, liveTimes].map(data => data.map(formatPickerData));\r\n            buttonText = getButtonText(route);\r\n            this.setState({\r\n                name,\r\n                id_number,\r\n                is_new_user,\r\n                selfie,\r\n                id_card_front,\r\n                id_card_back,\r\n                worktype: worktype ? [worktype] : null,\r\n                worktypes,\r\n                education: education ? [education] : null,\r\n                educations,\r\n                address,\r\n                street,\r\n                marriage: marriage ? [marriage] : null,\r\n                marriages,\r\n                liveTime: liveTime ? [liveTime] : null,\r\n                liveTimes,\r\n                verify_loan_pass,\r\n                disabled,\r\n                buttonText,\r\n                loaded: 1\r\n            });\r\n        }).catch(middleware.bind(this));\r\n    }\r\n    submit(){\r\n        let {COMPLETED_TEXT, nextStepLink, route, middleware} = this.props;\r\n        let {getFieldInstance, getFieldsValue, validateFields} = this.props.form;\r\n        validateFields({force: false}, (errors, values) => {\r\n            if(errors){\r\n                for(let i in errors){\r\n                    let input = errors[i];\r\n                    input.errors && input.errors.map(error => {\r\n                        Toast.offline(error.message, 1.5, () => {\r\n                            let element = getFieldInstance(error.field);\r\n                            if(element && element.refs && element.refs.input){\r\n                                let {input} = element.refs;\r\n                                setTimeout(input.focus());\r\n                            }\r\n                        });\r\n                    });\r\n                    break;\r\n                }\r\n            }else{\r\n                let {lock, buttonText, disabled} = this.state;\r\n                let {name, id_number, worktype, education, address, street: address_distinct, marriage, liveTime} = getFieldsValue();\r\n\r\n                if(lock){\r\n                    this.setState({lock: 0, loaded: 0, loading: 1});\r\n\r\n                    let start = Date.now();\r\n                    request.post(disabled ? 'credit-info/save-person-info' : 'credit-card/save-person-info', {\r\n                        name,\r\n                        id_number,\r\n                        work_type: worktype ? worktype[0] : null,\r\n                        degrees: education ? education[0] : null,\r\n                        address: address || '',\r\n                        address_distinct: address_distinct|| '',\r\n                        marriage: marriage ? marriage[0] : null,\r\n                        live_time_type: liveTime ? liveTime[0] : null\r\n                    }).then(response => {\r\n                        let end = Date.now();\r\n                        let timeout = 0;\r\n                        if(end - start < 1000) timeout = 1000;\r\n                        if(end - start > 1000) timeout = 0;\r\n                        let {message} = response;\r\n                        setTimeout(() => {\r\n                            Toast.success(message, 1.5, () => {\r\n                                buttonText = COMPLETED_TEXT;\r\n                                setTimeout(() => nextStepLink(route));\r\n                            });\r\n                            this.setState({lock: 1, loaded: 1, loading: 0, disabled: 1, buttonText});\r\n                        }, timeout);\r\n                    }).catch(middleware.bind(this));\r\n                }\r\n            }\r\n        });\r\n    }\r\n    render(){\r\n        let {form: {getFieldProps, getFieldsError, isFieldsTouched}, label} = this.props;\r\n        let errors = getFieldsError();\r\n        let {\r\n            is_new_user,\r\n            name,\r\n            selfie,\r\n            id_card_front,\r\n            id_card_back,\r\n            id_number,\r\n            worktype,\r\n            worktypes,\r\n            education,\r\n            educations,\r\n            address,\r\n            street,\r\n            marriage,\r\n            marriages,\r\n            liveTime,\r\n            liveTimes,\r\n            buttonText,\r\n            lock,\r\n            loading,\r\n            loaded,\r\n            disabled,\r\n            verify_loan_pass\r\n        } = this.state;\r\n        let editable = !loading && loaded && lock;\r\n        return (\r\n            <div className='information'>\r\n                <List>\r\n                    <div className='upload'>\r\n                        <List.Item extra={\r\n                            <div className='selfie' style={selfie ? {\r\n                                backgroundImage: `url(${selfie})`,\r\n                                backgroundSize: 'cover'\r\n                            } : {}}>\r\n                                <Upload {...extend(uploadSelfieProps, {\r\n                                    customRequest: customRequest.bind(this, 'selfie')\r\n                                })}/>\r\n                            </div>\r\n                        } arrow='empty'>{label('自拍照')}</List.Item>\r\n                        <List.Item extra={\r\n                            <div className='id_card'>\r\n                                <div className='id_card_front' style={id_card_front ? {\r\n                                    backgroundImage: `url(${id_card_front})`,\r\n                                    backgroundSize: 'cover'\r\n                                } : {}}>\r\n                                        <Upload {...extend(uploadIdCardFrondProps, {\r\n                                            customRequest: customRequest.bind(this, 'id_card_front')\r\n                                        })}/>\r\n                                    </div>\r\n                                    <div className='id_card_back' style={id_card_back ? {\r\n                                    backgroundImage: `url(${id_card_back})`,\r\n                                    backgroundSize: 'cover'\r\n                                } : {}}>\r\n                                    <Upload {...extend(uploadIdCardBackProps, {\r\n                                        customRequest: customRequest.bind(this, 'id_card_back')\r\n                                    })}/>\r\n                                </div>\r\n                            </div>\r\n                        } arrow='empty'>{label('身份证照片')}</List.Item>\r\n                        <InputItem\r\n                        {...getFieldProps('selfie', {\r\n                            initialValue: selfie,\r\n                            rules: [{\r\n                                required: true,\r\n                                message: '自拍照不能为空'\r\n                            }]\r\n                        })}/>\r\n                        <InputItem\r\n                        {...getFieldProps('id_card_front', {\r\n                            initialValue: id_card_front,\r\n                            rules: [{\r\n                                required: true,\r\n                                message: '身份证正面不能为空'\r\n                            }]\r\n                        })}/>\r\n                        <InputItem\r\n                        {...getFieldProps('id_card_back', {\r\n                            initialValue: id_card_back,\r\n                            rules: [{\r\n                                required: true,\r\n                                message: '身份证背面不能为空'\r\n                            }]\r\n                        })}/>\r\n                    </div>\r\n                    <InputItem\r\n                    editable={editable && !disabled}\r\n                    labelNumber={5}\r\n                    placeholder='姓名'\r\n                    {...getFieldProps('name', {\r\n                        initialValue: name,\r\n                        rules: [{\r\n                            required: true,\r\n                            message: '姓名不能为空'\r\n                        }, {\r\n                            pattern: /[\\u4e00-\\u9fa5]+/,\r\n                            message: '请输入正确的姓名'\r\n                        }]\r\n                    })}>\r\n                        {label('姓名')}\r\n                    </InputItem>\r\n                    <InputItem\r\n                    clear\r\n                    editable={editable && !disabled}\r\n                    labelNumber={5}\r\n                    placeholder='身份证号码'\r\n                    {...getFieldProps('id_number', {\r\n                        initialValue: id_number,\r\n                        rules: [{\r\n                            required: true,\r\n                            message: '身份证不能为空'\r\n                        }, {\r\n                            min: 15,\r\n                            max: 18,\r\n                            message: '身份证长度错误'\r\n                        }]\r\n                    })}>\r\n                        {label('身份证号码')}\r\n                    </InputItem>\r\n                    <Picker\r\n                    cols={1}\r\n                    disabled={!editable}\r\n                    labelNumber={5}\r\n                    data={educations}\r\n                    {...getFieldProps('education', {\r\n                        initialValue: education,\r\n                        rules: [{\r\n                            required: true,\r\n                            message: '请选择学历'\r\n                        }]\r\n                    })}>\r\n                        <List.Item arrow='horizontal'>{label('学历')}</List.Item>\r\n                    </Picker>\r\n                    {(is_new_user == 0) ? (\r\n                        <div>\r\n                            <Picker\r\n                            cols={1}\r\n                            disabled={!editable}\r\n                            labelNumber={5}\r\n                            data={worktypes}\r\n                            {...getFieldProps('worktype', {\r\n                                initialValue: worktype,\r\n                                rules: [{\r\n                                    required: true,\r\n                                    message: '请选择工作类型'\r\n                                }]\r\n                            })}>\r\n                                <List.Item arrow='horizontal'>{label('工作类型')}</List.Item>\r\n                            </Picker>\r\n                            <InputItem\r\n                            editable={editable}\r\n                            labelNumber={5}\r\n                            placeholder='现居地址'\r\n                            {...getFieldProps('address', {\r\n                                initialValue: address,\r\n                                rules: [{\r\n                                    required: true,\r\n                                    message: '现居地址不能为空'\r\n                                }]\r\n                            })}>\r\n                                {label('现居地址')}\r\n                            </InputItem>\r\n                            <InputItem\r\n                            editable={editable}\r\n                            className='street'\r\n                            placeholder='填写具体街道门牌号'\r\n                            {...getFieldProps('street', {\r\n                                initialValue: street,\r\n                                rules: [{\r\n                                    required: true,\r\n                                    message: '街道门牌号不能为空'\r\n                                }]\r\n                            })}></InputItem>\r\n                            {\r\n                                // <Picker\r\n                                // cols={1}\r\n                                // disabled={!editable}\r\n                                // labelNumber={5}\r\n                                // data={marriages}\r\n                                // {...getFieldProps('marriage', {\r\n                                //     initialValue: marriage,\r\n                                //     rules: [{\r\n                                //         required: true,\r\n                                //         message: '请选择婚姻状况'\r\n                                //     }]\r\n                                // })}>\r\n                                //     <List.Item arrow='horizontal'>{label('婚姻状况')}</List.Item>\r\n                                // </Picker>\r\n                                // <Picker\r\n                                // cols={1}\r\n                                // disabled={!editable}\r\n                                // labelNumber={5}\r\n                                // data={liveTimes}\r\n                                // {...getFieldProps('liveTime', {\r\n                                //     initialValue: liveTime,\r\n                                //     rules: [{\r\n                                //         required: true,\r\n                                //         message: '请选择居住时长'\r\n                                //     }]\r\n                                // })}>\r\n                                //     <List.Item arrow='horizontal'>{label('居住时长')}</List.Item>\r\n                                // </Picker>\r\n                            }\r\n                        </div>\r\n                    ) : ''}\r\n                    \r\n                </List>\r\n                <Button\r\n                    type='primary'\r\n                    // disabled={!lock || disabled || loading}\r\n                    loading={loading}\r\n                    className={classnames({\r\n                    'button-submit': true,\r\n                    'button-round': true,\r\n                    'button-loading': !loaded,\r\n                    // 'button-disabled': disabled\r\n                })}\r\n                onClick={this.submit.bind(this)}>{buttonText}</Button>\r\n                <div className='security'>银行级数据加密防护</div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default createForm()(Information);"]}