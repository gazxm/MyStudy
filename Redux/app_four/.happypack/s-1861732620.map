{"version":3,"sources":["src\\js\\pages\\signin\\detailed.js"],"names":["Item","Brief","title","page","size","lock","Detailed","props","data","DataSource","rowHasChanged","row1","row2","state","money","dataSource","cloneWithRows","loading","loaded","empty","document","undefined","then","hide","response","score","items","list","length","setState","map","item","index","ii","catch","middleware","bind","code","message","type","indexOf","setTimeout","event","row","name","operator_gold_score","created_at","date","unix","format","padding","textAlign","onEndReached"],"mappings":"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","file":"detailed.js","sourceRoot":"E:/MyStudy/Redux/app_four","sourcesContent":["import 'scss/signin/detailed.component.scss';\r\nimport React, {Component} from 'react';\r\nimport {Toast, ListView, List} from 'antd-mobile';\r\nimport {login, share} from 'utils';\r\nimport moment from 'moment';\r\n\r\nimport request from './request';\r\n\r\nlet Item = List.Item;\r\nlet Brief = Item.Brief;\r\n\r\nlet title = '金币明细';\r\nlet page = 1;\r\nlet size = 15;\r\nlet lock = true;\r\n\r\nexport default class Detailed extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        let data = new ListView.DataSource({\r\n            rowHasChanged: (row1, row2) => row1 !== row2,\r\n        });\r\n\r\n        this.data = {};\r\n        this.state = {\r\n            money: 0,\r\n            dataSource: data.cloneWithRows({}),\r\n            loading: 1,\r\n            loaded: 0,\r\n            empty: 0\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        document.title = title;\r\n        let {dataSource, loading, loaded} = this.state;\r\n        Toast.loading(undefined, 0);\r\n        request(`credit-gold/draw-list`).then(response => {\r\n            Toast.hide();\r\n            let {score: money, list: items} = response.data;\r\n            let data = {};\r\n            if(!items.length){\r\n                this.setState({\r\n                    empty: 1,\r\n                    loaded: 1\r\n                });\r\n                return;\r\n            }\r\n            items.map((item, index) => {\r\n                let ii = page * items.length + index;\r\n                data[ii] = item;\r\n            });\r\n            items.length < size && (loading = 0);\r\n            this.data = {...this.data, ...data};\r\n            page++;\r\n            this.setState({\r\n                money,\r\n                dataSource: dataSource.cloneWithRows(this.data),\r\n                loading,\r\n                loaded: 1\r\n            });\r\n        }).catch(this.middleware.bind(this));\r\n    }\r\n    middleware(response){\r\n        let {code, message} = response;\r\n        let type = 'info';\r\n\r\n        Toast.hide();\r\n        if([-1000, -1004].indexOf(code) >= 0){\r\n            type = 'fail';\r\n        }else if([-1003].indexOf(code) >= 0){\r\n            type = 'offline';\r\n        }else if(-1001 === code){\r\n            login();\r\n            return;\r\n        }\r\n        this.setState({\r\n            loaded: 1\r\n        });\r\n        Toast[type](message, 1.5);\r\n        setTimeout(() => {\r\n            lock = !lock;\r\n        }, 1500);\r\n    }\r\n    onEndReached(event){\r\n        let {loading, dataSource} = this.state;\r\n        if(lock && loading){\r\n            lock = !lock;\r\n            request(`credit-gold/draw-list?page=${page}`).then(response => {\r\n                let {score: money, list: items} = response.data;\r\n                let data = {};\r\n                if(!items.length){\r\n                    this.setState({\r\n                        loading: 0\r\n                    });\r\n                    return;\r\n                }\r\n                items.map((item, index) => {\r\n                    let ii = page * items.length + index;\r\n                    data[ii] = item;\r\n                });\r\n                this.data = {...this.data, ...data};\r\n                this.setState({\r\n                    money,\r\n                    dataSource: dataSource.cloneWithRows(this.data),\r\n                });\r\n                page++;\r\n                lock = !lock;\r\n            }).catch(this.middleware.bind(this));\r\n        }\r\n    }\r\n    render(){\r\n        let {money, dataSource, loading, loaded, empty} = this.state;\r\n        let row = (data) => {\r\n            let {name, operator_gold_score: money, created_at} = data;\r\n            let date = moment.unix(created_at).format('YYYY-MM-DD HH:mm:ss');\r\n            return (\r\n                <Item multipleLine extra={`${money}`}>\r\n                    {name}<Brief>{date}</Brief>\r\n                </Item>\r\n            );\r\n        };\r\n        return (\r\n            <div className='wrapper wrapper-signin-detailed loaded'>\r\n                <div className='header'>\r\n                    <div>\r\n                        <p>总金币</p>\r\n                        <p>{money}</p>\r\n                    </div>\r\n                </div>\r\n                <div className={`content ${loaded ? 'loaded': ''}`}>\r\n                    {!empty ? <ListView\r\n                    dataSource={dataSource}\r\n                    renderFooter={() => <div style={{padding: 30, textAlign: 'center'}}>\r\n                        {(loading && !loaded) ? '加载中...' : ''}\r\n                    </div>}\r\n                    pageSize={10}\r\n                    renderRow={row}\r\n                    scrollRenderAheadDistance={333}\r\n                    scrollEventThrottle={100}\r\n                    onEndReached={this.onEndReached.bind(this)}\r\n                    onEndReachedThreshold={100}\r\n                    renderBodyComponent={() => <List className='logger'/>}\r\n                    /> : <div className='empty'>暂无数据</div>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                    // <ListView\r\n                    // dataSource={data}/>"]}